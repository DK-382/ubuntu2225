--分割字符串函数
function string.split(str,delimiter)
	if str  ==  nil or str ==  ''  or  delimiter  == nil then
			return  nil
	end
	local  result =  {}
	for match in  (str..delimiter):gmatch("(.-)"..delimiter) do
			table.insert(result,match)
	end return result
end
--定义函数，把变量点赋值给示教器程序变量路点
function set_tp(pname,tp)
	cpstr="0,0,0,0,0,0,0"
	for i=1,6,1 do
		cpstr=cpstr..","..tostring(tp[i])
	end
	print("cwp:"..cpstr)
	set_global_variable(pname,cpstr)
end


--定义一个表格，用以存放分割后的相机所发送的坐标
table1 = {0,0,0}
ip="192.168.1.102"--相机（server）IP
port=8081--相机（server）端口
tcp.client.connect(ip,port) --连接相机（server）
while (1) do
	pose=get_current_waypoint()
	joint={pose.joint.j1,pose.joint.j2,pose.joint.j3,pose.joint.j4,pose.joint.j5,pose.joint.j6}
	print("pose J1: "..pose.joint.j1)
	print("pose J2: "..pose.joint.j2)
	print("pose J3: "..pose.joint.j3)
	print("pose J4: "..pose.joint.j4)
	print("pose J5: "..pose.joint.j5)
	print("pose J6: "..pose.joint.j6)
	print(
		"P,"..
		tostring(pose.joint.j1)..","..
		tostring(pose.joint.j2)..","..
		tostring(pose.joint.j3)..","..
		tostring(pose.joint.j4)..","..
		tostring(pose.joint.j5)..","..
		tostring(pose.joint.j6)
)

	recv_str = "1"
	--tcp.client.send_str_data(ip,port,"P	,1,-31.586486,28.360947,95.121176,15.418785,111.211073,-21.346838")
	--tcp.client.send_str_data(
		--ip,
		--port,
		--"P,".."1,"..
		--tostring(pose.joint.j1)..","..
		--tostring(pose.joint.j2)..","..
		--tostring(pose.joint.j3)..","..
		--tostring(pose.joint.j4)..","..
		--tostring(pose.joint.j5)..","..
		--tostring(pose.joint.j6)
		--)
       tcp.client.send_str_data(ip,port,"P")

	repeat
	recv_str=tcp.client.recv_str_data(ip,port)
	until(recv_str~="")


	--recv_str_no_use=tcp.client.recv_str_data(ip,port)
	--recv_str=tcp.client.recv_str_data(ip,port)

	cnt=0
	print("recv_str = "..recv_str)

	table1 = string.split(recv_str,",")
	if(table1[1] ~= "1100") then
		print("no object!")
	else
		table1 = string.split(recv_str,",")
		set_global_variable("V_B_ClawRun" ,true)

		--TarID = string.sub(table1[8], 4)
		--set_global_variable("V_I_MM_TargetID" ,tonumber(TarID))
		break
	end
	table1 = string.split(recv_str,";")

end
--a=tonumber(table1[1])
--b=tonumber(table1[2])

x=tonumber(table1[2])
y=tonumber(table1[3])
z=tonumber(table1[4])
rx=tonumber(table1[5])
ry=tonumber(table1[6])
rz=tonumber(table1[7])
	print("x = "..x)
	print("y = "..y)
	print("z = "..z)
	print("rx = "..rx)
	print("ry = "..ry)
	print("rz = "..rz)


set_global_variable("V_D_x", x)
set_global_variable("V_D_y", y)
set_global_variable("V_D_z", z)
set_global_variable("V_D_rx", rx)
set_global_variable("V_D_ry", ry)
set_global_variable("V_D_rz", rz)

--set_modbus_io_status("XB",x)
--set_modbus_io_status("YB",y)
--set_modbus_io_status("ZB",z)
--set_modbus_io_status("RXB",rx)
--set_modbus_io_status("RYB",ry)
--set_modbus_io_status("RZB",rz)
 
init_global_move_profile()
set_joint_maxvelc({0.5,0.5,0.5,0.5,0.5,0.5})
set_joint_maxacc({2.654390,2.654390,2.654390,3.368128,3.368128,3.368128})

move_joint(get_target_pose({x+0.05, y, z}, rpy2quaternion({d2r(rx), d2r(ry), d2r(rz)}), false, {0.0, 0.0, 0.0}, {1.0, 0.0, 0.0, 0.0}), true)

move_joint(get_target_pose({x, y, z}, rpy2quaternion({d2r(rx), d2r(ry), d2r(rz)}), false, {0.0, 0.0, 0.0}, {1.0, 0.0, 0.0, 0.0}), true)




