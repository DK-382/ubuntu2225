--- Auto generated by 'aubo_scope' v0.28.4-rc.18 2025-02-12 14:16:22
--- DO NOT MODIFY IT!
local app = {}
local aubo = require('aubo')
local sched = sched or aubo.sched
local math = aubo.math or math

local sleep = sched.sleep
local thread = sched.thread
local sync = sched.sync
local run = sched.run
local kill = sched.kill
local halt = sched.halt

app.PRIORITY = 1000 -- set the app priority, which determines app execution order
app.VERSION = "0.1"
app.VENDOR = "Aubo Robotics"

function p_Untitled_6()
    local _ENV = sched.select_robot(1)
    setCollisionStopType(1)
    setCollisionLevel(6)
    setFreedriveDamp({0.5,0.5,0.5,0.5,0.5,0.5})
    setHomePosition({0,-0.2617993877991494,1.74532925199433,0.4363323129985824,1.570796326794897,0}    )
    modbusDeleteAllSignals()
    setDigitalInputActionDefault()
    setDigitalOutputRunstateDefault()
    setPayload(10, {0,0,0}, {0,0,0}, {0,0,0,0,0,0,0,0,0})
    local agv =sched.jsonrpc.proxy('http://127.0.0.1:8989/jsonrpc')
    sleep(0)
    setTcpOffset({0,0,0,0,0,0})
    setToolVoltageOutputDomain(0)
    setToolIoInput(0, true)
    setToolIoInput(1, true)
    setToolIoInput(2, true)
    setToolIoInput(3, true)
    setPlanContext(sched.current_thread_id(), 1, "初始变量")
    u57fau5ea7 = {0,0,0,0,0,0}
    u5de5u5177 = {0,0,0,0,0,0}
    u8defu70b9_0_p = {-1.044823931917783,0.1297669904613767,0.6304617691742599,-3.14149849812903,5.340827043820798e-06,-1.48405110694441}    
    u8defu70b9_0_q = {3.208541042827416,-0.5367157457501993,1.02666221095958,-0.009297712375065707,1.572065362606217,-0.01792715589204262}    
    
    
    function str_cat(str1, str2)
        return tostring(str1) .. tostring(str2)
    end
    
    local function calculate_point_to_move_towards(feature, direction, position_distance)
        local posDir={direction[1], direction[2], direction[3]}
        if (math.norm(posDir) < 1e-6) then
            return getTargetTcpPose()
        end
        local direction_vector_normalized=math.normalize(posDir)
        local displacement_pose={direction_vector_normalized[1] * position_distance,direction_vector_normalized[2] * position_distance,direction_vector_normalized[3] * position_distance,0,0,0}

        local wanted_displacement_in_base_frame=poseSub(poseTrans(feature, displacement_pose), feature)
        return poseAdd(getTargetTcpPose(), wanted_displacement_in_base_frame)
    end
    setPlanContext(sched.current_thread_id(), 2, "机器人编程")
    while true do
        setPlanContext(sched.current_thread_id(), 3, "Seeragv  Move To: LM1 default")
        function waitForMotionComplete()
          sleep(0)
        end
        waitForMotionComplete()
        agv.robot_task_gotarget_req("LM1",-2147483648,-2147483648,-2147483648,-2147483648,"")
        while true do
            if (agv.robot_status_task_req()=="COMPLETED") then
                print("Navigation has completed.")
                break
            else
                sleep(0.1)
                print("Navigation is running...")
            end
        end
        
        setPlanContext(sched.current_thread_id(), 4, "关节运动")
        setPlanContext(sched.current_thread_id(), 5, "路点_0")
        moveJoint(inverseKinematics(u8defu70b9_0_q, u8defu70b9_0_p), 1.39626, 1.0472, 0, 0)
        
        setPlanContext(sched.current_thread_id(), 6, "Seeragv  Move To: LM2 default")
        function waitForMotionComplete()
          sleep(0)
        end
        waitForMotionComplete()
        agv.robot_task_gotarget_req("LM2",-2147483648,-2147483648,-2147483648,-2147483648,"")
        while true do
            if (agv.robot_status_task_req()=="COMPLETED") then
                print("Navigation has completed.")
                break
            else
                sleep(0.1)
                print("Navigation is running...")
            end
        end
        sched.cancel_point()
    end
end

function app:start(api)
  --
  self.api = api
  print("start---")
  p_Untitled_6()
end

function app:robot_error_handler(name, err)
  --
  print("An error hanppen to robot "..name)
end

-- return our app object
return app


