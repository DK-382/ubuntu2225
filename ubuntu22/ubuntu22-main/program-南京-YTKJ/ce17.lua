--- Auto generated by 'aubo_scope' v0.28.4-rc.18 2025-02-12 15:18:31
--- DO NOT MODIFY IT!
local app = {}
local aubo = require('aubo')
local sched = sched or aubo.sched
local math = aubo.math or math

local sleep = sched.sleep
local thread = sched.thread
local sync = sched.sync
local run = sched.run
local kill = sched.kill
local halt = sched.halt

app.PRIORITY = 1000 -- set the app priority, which determines app execution order
app.VERSION = "0.1"
app.VENDOR = "Aubo Robotics"

function p_ce17()
    local _ENV = sched.select_robot(1)
    setCollisionStopType(1)
    setCollisionLevel(6)
    setFreedriveDamp({0.5,0.5,0.5,0.5,0.5,0.5})
    setHomePosition({0,-0.2617993877991494,1.74532925199433,0.4363323129985824,1.570796326794897,0}    )
    modbusDeleteAllSignals()
    setDigitalInputActionDefault()
    setDigitalOutputRunstateDefault()
    setPayload(10, {0,0,0}, {0,0,0}, {0,0,0,0,0,0,0,0,0})
    local agv =sched.jsonrpc.proxy('http://127.0.0.1:8989/jsonrpc')
    sleep(0)
    setTcpOffset({0,0,0,0,0,0})
    setToolVoltageOutputDomain(0)
    setToolIoInput(0, true)
    setToolIoInput(1, true)
    setToolIoInput(2, true)
    setToolIoInput(3, true)
    setPlanContext(sched.current_thread_id(), 1, "初始变量")
    u57fau5ea7 = {0,0,0,0,0,0}
    u5de5u5177 = {0,0,0,0,0,0}
    u8defu70b9_0_p = {0.2013000000000004,0.7030000000000001,0.7162000000000004,3.14159265,0,3.14159265}    
    u8defu70b9_0_q = {1.570796325,0,1.570796325,0,1.570796325,0}    
    u8defu70b9_1_p = {0.7602216080819464,0.5829364133386437,0.5722145811329141,-3.141559949281667,4.56558962516e-05,-2.901476037737245}    
    u8defu70b9_1_q = {0.8658773870185815,-0.3825613332928066,1.350844028425853,0.16263066576022,1.570722262669725,-0.9450008652960485}    
    u8defu70b9_2_p = {0.9676669564104867,-0.4755558347642566,0.5722142645048827,-3.141592565879199,-1.815236925e-07,2.558405131384534}    
    u8defu70b9_2_q = {-0.2689795685239723,-0.5851370212494665,1.046234685983273,0.0606225687128003,1.570789200901666,-1.256576151019163}    
    u8defu70b9_3_p = {0.921885573709102,-0.4953894191537618,0.5722142467764999,-3.141592565879199,-1.815236925e-07,2.558405131384534}    
    u8defu70b9_3_q = {-0.2995402361708628,-0.5291193233981537,1.134246124454341,0.0925559316048986,1.570796546395315,-1.287148034821103}    
    u8defu70b9_4_p = {0.8678498267104476,-0.5784420942479581,0.5722142092570895,-3.141592559372941,-1.886575171e-07,2.530656988720364}    
    u8defu70b9_4_q = {-0.3936753395945759,-0.5228996499852718,1.143847524707413,0.09594946362705389,1.57079518614857,-1.353533636417043}    
    
    
    function str_cat(str1, str2)
        return tostring(str1) .. tostring(str2)
    end
    
    local function calculate_point_to_move_towards(feature, direction, position_distance)
        local posDir={direction[1], direction[2], direction[3]}
        if (math.norm(posDir) < 1e-6) then
            return getTargetTcpPose()
        end
        local direction_vector_normalized=math.normalize(posDir)
        local displacement_pose={direction_vector_normalized[1] * position_distance,direction_vector_normalized[2] * position_distance,direction_vector_normalized[3] * position_distance,0,0,0}

        local wanted_displacement_in_base_frame=poseSub(poseTrans(feature, displacement_pose), feature)
        return poseAdd(getTargetTcpPose(), wanted_displacement_in_base_frame)
    end
    setPlanContext(sched.current_thread_id(), 2, "机器人编程")
    while true do
        setPlanContext(sched.current_thread_id(), 3, "Seeragv  Move To: LM1 default")
        function waitForMotionComplete()
          sleep(0)
        end
        waitForMotionComplete()
        agv.robot_task_gotarget_req("LM1",-2147483648,-2147483648,-2147483648,-2147483648,"")
        while true do
            if (agv.robot_status_task_req()=="COMPLETED") then
                print("Navigation has completed.")
                break
            else
                sleep(0.1)
                print("Navigation is running...")
            end
        end
        
        setPlanContext(sched.current_thread_id(), 4, "直线运动")
        setPlanContext(sched.current_thread_id(), 5, "路点_0")
        moveLine(u8defu70b9_0_p, 1.2, 0.2, 0, 0)
        
        setPlanContext(sched.current_thread_id(), 6, "关节运动")
        setPlanContext(sched.current_thread_id(), 7, "路点_1")
        moveJoint(inverseKinematics(u8defu70b9_1_q, u8defu70b9_1_p), 1.39626, 1.0472, 0, 0)
        
        setPlanContext(sched.current_thread_id(), 8, "Seeragv  Move To: LM2 default")
        function waitForMotionComplete()
          sleep(0)
        end
        waitForMotionComplete()
        agv.robot_task_gotarget_req("LM2",-2147483648,-2147483648,-2147483648,-2147483648,"")
        while true do
            if (agv.robot_status_task_req()=="COMPLETED") then
                print("Navigation has completed.")
                break
            else
                sleep(0.1)
                print("Navigation is running...")
            end
        end
        
        setPlanContext(sched.current_thread_id(), 9, "关节运动")
        setPlanContext(sched.current_thread_id(), 10, "路点_2")
        moveJoint(inverseKinematics(u8defu70b9_2_q, u8defu70b9_2_p), 1.39626, 1.0472, 0, 0)
        
        setPlanContext(sched.current_thread_id(), 11, "直线运动")
        setPlanContext(sched.current_thread_id(), 12, "路点_3")
        moveLine(u8defu70b9_3_p, 1.2, 0.1, 0, 0)
        
        setPlanContext(sched.current_thread_id(), 13, "直线运动")
        setPlanContext(sched.current_thread_id(), 14, "路点_4")
        moveLine(u8defu70b9_4_p, 1.2, 0.1, 0, 0)
        sched.cancel_point()
    end
end

function app:start(api)
  --
  self.api = api
  print("start---")
  p_ce17()
end

function app:robot_error_handler(name, err)
  --
  print("An error hanppen to robot "..name)
end

-- return our app object
return app


