--- Auto generated by 'aubo_scope' v0.28.4-rc.18 2025-02-11 15:53:53
--- DO NOT MODIFY IT!
local app = {}
local aubo = require('aubo')
local sched = sched or aubo.sched
local math = aubo.math or math

local sleep = sched.sleep
local thread = sched.thread
local sync = sched.sync
local run = sched.run
local kill = sched.kill
local halt = sched.halt

app.PRIORITY = 1000 -- set the app priority, which determines app execution order
app.VERSION = "0.1"
app.VENDOR = "Aubo Robotics"

function p_fengxi()
    local _ENV = sched.select_robot(1)
    setCollisionStopType(1)
    setCollisionLevel(6)
    setFreedriveDamp({0.5,0.5,0.5,0.5,0.5,0.5})
    setHomePosition({0,-0.2617993877991494,1.74532925199433,0.4363323129985824,1.570796326794897,0}    )
    modbusDeleteAllSignals()
    setDigitalInputActionDefault()
    setDigitalOutputRunstateDefault()
    setPayload(10, {0,0,0}, {0,0,0}, {0,0,0,0,0,0,0,0,0})
    local agv =sched.jsonrpc.proxy('http://127.0.0.1:8989/jsonrpc')
    sleep(0)
    setTcpOffset({0,0,0,0,0,0})
    setToolVoltageOutputDomain(0)
    setToolIoInput(0, true)
    setToolIoInput(1, true)
    setToolIoInput(2, true)
    setToolIoInput(3, true)
    setPlanContext(sched.current_thread_id(), 1, "初始变量")
    u57fau5ea7 = {0,0,0,0,0,0}
    u5de5u5177 = {0,0,0,0,0,0}
    u8defu70b9_0_p = {-0.2020377350173973,-0.3139495113994035,0.3517149977855581,0.006894568395322238,-0.1105395282202272,-2.410895537927265}    
    u8defu70b9_0_q = {-1.597595933061403,-0.02035722446691096,2.761131611455027,1.293248744592503,-1.645742341720031,0.7563412934325087}    
    u8defu70b9_1_p = {-0.6346833822165282,-0.048408130429002,0.3493095437738942,0.08296641983217788,0.004792020201642502,2.187525297300382}    
    u8defu70b9_1_q = {-2.742239234110221,-0.3460350148707662,2.292890244285815,1.150005652370694,-1.548225039848661,0.2118655286998964}    
    u8defu70b9_2_p = {-0.6346764395142533,-1.063602371215049,0.3493075926756983,0.08294870432673222,0.004797808842964696,2.187545638336198}    
    u8defu70b9_2_q = {-1.949531964454808,-1.076251721085343,0.8750987112143056,0.454503825786209,-1.611946838034098,-0.5757507472911677}    
    u8defu70b9_3_p = {-0.6346338095990277,-1.063615708465852,-0.1060525025843884,0.08295945065149865,0.004799745282539529,2.187598522555836}    
    u8defu70b9_3_q = {-1.949153953787606,-1.58605715744507,0.6298927978699705,0.7191328934369829,-1.612574605749272,-0.5752863341857485}    
    u8defu70b9_4_p = {-0.6346768678875651,-1.063602077022854,0.3493091334907241,0.08294578055384895,0.004802095790795212,2.187548714075056}    
    u8defu70b9_4_q = {-1.949531964454808,-1.076250371047246,0.8750987112143056,0.4545024757481118,-1.611941437881709,-0.5757480472149734}    
    u8defu70b9_5_p = {-0.2020384180310963,-0.3139546891038703,0.3517159618425375,0.006895773000757124,-0.110538212371313,-2.410902281697347}    
    u8defu70b9_5_q = {-1.5975972830995,-0.02036127458120241,2.761122596324593,1.293243344440115,-1.645740991681933,0.7563358932801201}    
    u8defu70b9_6_p = {-1.07275280011345,-0.505829078767097,0.8610769622292103,-0.04283433010184162,-0.08329134630535885,2.768703635121339}    
    u8defu70b9_6_q = {-2.538116173897475,-0.8812603185617129,0.3661912175492777,-0.3104777114680538,-1.663346838506855,0.5928476297534637}    
    u8defu70b9_7_p = {-0.910482486654195,-0.3890690612474064,0.3629644406522669,-0.05037443976715266,-0.07876024039952155,2.769353155560807}    
    u8defu70b9_7_q = {-2.5436445799053,-0.6952885205651359,1.587732376206197,0.7165826714714683,-1.663923304774337,0.5955976573573564}    
    u8defu70b9_8_p = {-0.8341797799475286,-0.3890651366556045,-0.2303149116782903,-0.05035081789874252,-0.0786908162782733,2.769342583728046}    
    u8defu70b9_8_q = {-2.495973384656869,-1.428436159488623,1.449896666329076,1.307491646517426,-1.666083365729776,0.5486149815384713}    
    u8defu70b9_9_p = {-0.9104864332455372,-0.3890689390336425,0.3629687176550111,-0.05036770259126497,-0.07875176882573046,2.769352649579212}    
    u8defu70b9_9_q = {-2.543645929943398,-0.6952885205651359,1.587722234184459,0.7165745712428854,-1.66391250446956,0.5955990073954536}    
    u8defu70b9_10_p = {-0.2020384366977712,-0.3139554818479382,0.3517160516672183,0.006894765415244362,-0.1105371299369425,-2.410903514827927}    
    u8defu70b9_10_q = {-1.5975972830995,-0.02036127458120241,2.761121469433289,1.29324064436392,-1.645740991681933,0.7563345432420229}    
    u8defu70b9_11_p = {-1.074846668432645,-0.4176467340534776,0.7751421312907816,0.09921410164461773,-0.04838950445054566,2.27805607352784}    
    u8defu70b9_11_q = {-2.598875988497766,-0.7574847757007939,0.7522540363573803,0.04652636294204871,-1.601462442171638,0.167207618484302}    
    u8defu70b9_12_p = {-0.9933126795551813,-0.5158010725164743,0.4360179632982601,0.09922676401403249,-0.04833248863441537,2.278022845498514}    
    u8defu70b9_12_q = {-2.486709423234232,-0.8224648093927734,1.219343720613667,0.5743953090416301,-1.613547983217317,0.05440923539130219}    
    u8defu70b9_13_p = {-0.8762497458133474,-0.5158135066815156,0.08763974272383684,0.09922021672460728,-0.0482667304544543,2.278031908589797}    
    u8defu70b9_13_q = {-2.416415639591874,-1.062205924722604,1.478816077869578,1.070323703800762,-1.6217481146194,-0.01589399851773611}    
    u8defu70b9_14_p = {-0.9933125496538217,-0.5158020484303936,0.4360166253411628,0.0992270334653975,-0.04832591248070014,2.278026221368178}    
    u8defu70b9_14_q = {-2.486708073196135,-0.8224661594308706,1.219343720613667,0.5743966590797273,-1.613541233026831,0.05441058542939934}    
    u8defu70b9_15_p = {-0.2020385912367431,-0.3139566510161899,0.3517166223209156,0.006896500838117271,-0.1105367602428024,-2.410904937875898}    
    u8defu70b9_15_q = {-1.5975972830995,-0.02036127458120241,2.761119215650681,1.293239294325823,-1.645739641643836,0.7563331932039258}    
    
    
    function str_cat(str1, str2)
        return tostring(str1) .. tostring(str2)
    end
    
    local function calculate_point_to_move_towards(feature, direction, position_distance)
        local posDir={direction[1], direction[2], direction[3]}
        if (math.norm(posDir) < 1e-6) then
            return getTargetTcpPose()
        end
        local direction_vector_normalized=math.normalize(posDir)
        local displacement_pose={direction_vector_normalized[1] * position_distance,direction_vector_normalized[2] * position_distance,direction_vector_normalized[3] * position_distance,0,0,0}

        local wanted_displacement_in_base_frame=poseSub(poseTrans(feature, displacement_pose), feature)
        return poseAdd(getTargetTcpPose(), wanted_displacement_in_base_frame)
    end
    setPlanContext(sched.current_thread_id(), 2, "机器人编程")
    while true do
        setPlanContext(sched.current_thread_id(), 3, "Seeragv  Move To: LM1 forward")
        function waitForMotionComplete()
          sleep(0)
        end
        waitForMotionComplete()
        agv.robot_task_gotarget_req("LM1",-2147483648,-2147483648,-2147483648,-2147483648,"forward")
        while true do
            if (agv.robot_status_task_req()=="COMPLETED") then
                print("Navigation has completed.")
                break
            else
                sleep(0.1)
                print("Navigation is running...")
            end
        end
        
        setPlanContext(sched.current_thread_id(), 4, "关节运动")
        setPlanContext(sched.current_thread_id(), 5, "路点_0")
        moveJoint(inverseKinematics(u8defu70b9_0_q, u8defu70b9_0_p), 1.39626, 1.0472, 0, 0)
        
        setPlanContext(sched.current_thread_id(), 6, "Seeragv  Move To: LM2 forward")
        function waitForMotionComplete()
          sleep(0)
        end
        waitForMotionComplete()
        agv.robot_task_gotarget_req("LM2",-2147483648,-2147483648,-2147483648,-2147483648,"forward")
        while true do
            if (agv.robot_status_task_req()=="COMPLETED") then
                print("Navigation has completed.")
                break
            else
                sleep(0.1)
                print("Navigation is running...")
            end
        end
        
        setPlanContext(sched.current_thread_id(), 7, "关节运动")
        setPlanContext(sched.current_thread_id(), 8, "路点_1")
        moveJoint(inverseKinematics(u8defu70b9_1_q, u8defu70b9_1_p), 2.61799, 3.49066, 0, 0)
        
        setPlanContext(sched.current_thread_id(), 9, "直线运动")
        setPlanContext(sched.current_thread_id(), 10, "路点_2")
        moveLine(u8defu70b9_2_p, 1.2, 0.25, 0, 0)
        
        setPlanContext(sched.current_thread_id(), 11, "直线运动")
        setPlanContext(sched.current_thread_id(), 12, "路点_3")
        moveLine(u8defu70b9_3_p, 1.2, 0.25, 0, 0)
        
        setPlanContext(sched.current_thread_id(), 13, "直线运动")
        setPlanContext(sched.current_thread_id(), 14, "路点_4")
        moveLine(u8defu70b9_4_p, 1.2, 0.25, 0, 0)
        
        setPlanContext(sched.current_thread_id(), 15, "关节运动")
        setPlanContext(sched.current_thread_id(), 16, "路点_5")
        moveJoint(inverseKinematics(u8defu70b9_5_q, u8defu70b9_5_p), 1.39626, 1.0472, 0, 0)
        
        setPlanContext(sched.current_thread_id(), 17, "Seeragv  Move To: LM3 forward")
        function waitForMotionComplete()
          sleep(0)
        end
        waitForMotionComplete()
        agv.robot_task_gotarget_req("LM3",-2147483648,-2147483648,-2147483648,-2147483648,"forward")
        while true do
            if (agv.robot_status_task_req()=="COMPLETED") then
                print("Navigation has completed.")
                break
            else
                sleep(0.1)
                print("Navigation is running...")
            end
        end
        
        setPlanContext(sched.current_thread_id(), 18, "关节运动")
        setPlanContext(sched.current_thread_id(), 19, "路点_6")
        moveJoint(inverseKinematics(u8defu70b9_6_q, u8defu70b9_6_p), 1.39626, 1.0472, 0, 0)
        
        setPlanContext(sched.current_thread_id(), 20, "直线运动")
        setPlanContext(sched.current_thread_id(), 21, "路点_7")
        moveLine(u8defu70b9_7_p, 1.2, 0.25, 0, 0)
        
        setPlanContext(sched.current_thread_id(), 22, "直线运动")
        setPlanContext(sched.current_thread_id(), 23, "路点_8")
        moveLine(u8defu70b9_8_p, 1.2, 0.25, 0, 0)
        
        setPlanContext(sched.current_thread_id(), 24, "直线运动")
        setPlanContext(sched.current_thread_id(), 25, "路点_9")
        moveLine(u8defu70b9_9_p, 1.2, 0.25, 0, 0)
        
        setPlanContext(sched.current_thread_id(), 26, "关节运动")
        setPlanContext(sched.current_thread_id(), 27, "路点_10")
        moveJoint(inverseKinematics(u8defu70b9_10_q, u8defu70b9_10_p), 1.39626, 1.0472, 0, 0)
        
        setPlanContext(sched.current_thread_id(), 28, "Seeragv  Move To: LM4 forward")
        function waitForMotionComplete()
          sleep(0)
        end
        waitForMotionComplete()
        agv.robot_task_gotarget_req("LM4",-2147483648,-2147483648,-2147483648,-2147483648,"forward")
        while true do
            if (agv.robot_status_task_req()=="COMPLETED") then
                print("Navigation has completed.")
                break
            else
                sleep(0.1)
                print("Navigation is running...")
            end
        end
        
        setPlanContext(sched.current_thread_id(), 29, "关节运动")
        setPlanContext(sched.current_thread_id(), 30, "路点_11")
        moveJoint(inverseKinematics(u8defu70b9_11_q, u8defu70b9_11_p), 1.39626, 1.0472, 0, 0)
        
        setPlanContext(sched.current_thread_id(), 31, "直线运动")
        setPlanContext(sched.current_thread_id(), 32, "路点_12")
        moveLine(u8defu70b9_12_p, 1.2, 0.25, 0, 0)
        
        setPlanContext(sched.current_thread_id(), 33, "直线运动")
        setPlanContext(sched.current_thread_id(), 34, "路点_13")
        moveLine(u8defu70b9_13_p, 1.2, 0.25, 0, 0)
        
        setPlanContext(sched.current_thread_id(), 35, "直线运动")
        setPlanContext(sched.current_thread_id(), 36, "路点_14")
        moveLine(u8defu70b9_14_p, 1.2, 0.25, 0, 0)
        
        setPlanContext(sched.current_thread_id(), 37, "关节运动")
        setPlanContext(sched.current_thread_id(), 38, "路点_15")
        moveJoint(inverseKinematics(u8defu70b9_15_q, u8defu70b9_15_p), 1.39626, 1.0472, 0, 0)
        
        setPlanContext(sched.current_thread_id(), 39, "Seeragv  Move To: LM1 backward")
        function waitForMotionComplete()
          sleep(0)
        end
        waitForMotionComplete()
        agv.robot_task_gotarget_req("LM1",-2147483648,-2147483648,-2147483648,-2147483648,"backward")
        while true do
            if (agv.robot_status_task_req()=="COMPLETED") then
                print("Navigation has completed.")
                break
            else
                sleep(0.1)
                print("Navigation is running...")
            end
        end
        sched.cancel_point()
    end
end

function app:start(api)
  --
  self.api = api
  print("start---")
  p_fengxi()
end

function app:robot_error_handler(name, err)
  --
  print("An error hanppen to robot "..name)
end

-- return our app object
return app


