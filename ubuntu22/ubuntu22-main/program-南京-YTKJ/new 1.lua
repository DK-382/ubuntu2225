--- Auto generated by 'aubo_scope' v0.28.4-rc.18 2025-02-11 17:58:45
--- DO NOT MODIFY IT!
local app = {}
local aubo = require('aubo')
local sched = sched or aubo.sched
local math = aubo.math or math

local sleep = sched.sleep
local thread = sched.thread
local sync = sched.sync
local run = sched.run
local kill = sched.kill
local halt = sched.halt

app.PRIORITY = 1000 -- set the app priority, which determines app execution order
app.VERSION = "0.1"
app.VENDOR = "Aubo Robotics"

function p_new_1()
    local _ENV = sched.select_robot(1)
    setCollisionStopType(1)
    setCollisionLevel(6)
    setFreedriveDamp({0.5,0.5,0.5,0.5,0.5,0.5})
    setHomePosition({0,-0.2617993877991494,1.74532925199433,0.4363323129985824,1.570796326794897,0}    )
    modbusDeleteAllSignals()
    setDigitalInputActionDefault()
    setDigitalOutputRunstateDefault()
    setPayload(10, {0,0,0}, {0,0,0}, {0,0,0,0,0,0,0,0,0})
    local agv =sched.jsonrpc.proxy('http://127.0.0.1:8989/jsonrpc')
    sleep(0)
    setTcpOffset({0,0,0,0,0,0})
    setToolVoltageOutputDomain(0)
    setToolIoInput(0, true)
    setToolIoInput(1, true)
    setToolIoInput(2, true)
    setToolIoInput(3, true)
    setPlanContext(sched.current_thread_id(), 1, "初始变量")
    u57fau5ea7 = {0,0,0,0,0,0}
    u5de5u5177 = {0,0,0,0,0,0}
    u8defu70b9_0_p = {-0.1323091120745469,1.046410327116217,0.6309217593746982,-3.141592061456933,-7.368822551e-07,-3.054814173368603}    
    u8defu70b9_0_q = {1.888599580310788,-0.5395352620538874,1.020225346553837,-0.0110054337760075,1.570800775759075,0.2310195811393602}    
    u8defu70b9_1_p = {-0.1270449564494759,1.052420589543159,0.6309217583251846,-3.141592061456933,-7.368822551e-07,-3.054814173368603}    
    u8defu70b9_1_q = {1.881987302013628,-0.5493997777450574,1.004862906445755,-0.0164585375620243,1.570787915705568,0.2244246555588448}    
    u8defu70b9_2_p = {-0.1216926740412435,1.05799949863474,0.6309217572413772,-3.141592061456933,-7.368822551e-07,-3.054814173368603}    
    u8defu70b9_2_q = {1.875477536245896,-0.5586049966800783,0.9904384799293475,-0.0216803190636131,1.570788135601519,0.2179147225797684}    
    
    
    function str_cat(str1, str2)
        return tostring(str1) .. tostring(str2)
    end
    
    local function calculate_point_to_move_towards(feature, direction, position_distance)
        local posDir={direction[1], direction[2], direction[3]}
        if (math.norm(posDir) < 1e-6) then
            return getTargetTcpPose()
        end
        local direction_vector_normalized=math.normalize(posDir)
        local displacement_pose={direction_vector_normalized[1] * position_distance,direction_vector_normalized[2] * position_distance,direction_vector_normalized[3] * position_distance,0,0,0}

        local wanted_displacement_in_base_frame=poseSub(poseTrans(feature, displacement_pose), feature)
        return poseAdd(getTargetTcpPose(), wanted_displacement_in_base_frame)
    end
    setPlanContext(sched.current_thread_id(), 2, "机器人编程")
    while true do
        setPlanContext(sched.current_thread_id(), 3, "直线运动")
        setPlanContext(sched.current_thread_id(), 4, "路点_0")
        moveLine(u8defu70b9_0_p, 1.2, 0.25, 0, 0)
        
        setPlanContext(sched.current_thread_id(), 5, "直线运动")
        setPlanContext(sched.current_thread_id(), 6, "路点_1")
        moveLine(u8defu70b9_1_p, 1.2, 0.25, 0, 0)
        
        setPlanContext(sched.current_thread_id(), 7, "直线运动")
        setPlanContext(sched.current_thread_id(), 8, "路点_2")
        moveLine(u8defu70b9_2_p, 1.2, 0.25, 0, 0)
        sched.cancel_point()
    end
end

function app:start(api)
  --
  self.api = api
  print("start---")
  p_new_1()
end

function app:robot_error_handler(name, err)
  --
  print("An error hanppen to robot "..name)
end

-- return our app object
return app


