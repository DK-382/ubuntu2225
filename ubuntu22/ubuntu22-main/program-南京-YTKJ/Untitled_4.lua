--- Auto generated by 'aubo_scope' v0.28.4-rc.18 2025-02-11 12:56:39
--- DO NOT MODIFY IT!
local app = {}
local aubo = require('aubo')
local sched = sched or aubo.sched
local math = aubo.math or math

local sleep = sched.sleep
local thread = sched.thread
local sync = sched.sync
local run = sched.run
local kill = sched.kill
local halt = sched.halt

app.PRIORITY = 1000 -- set the app priority, which determines app execution order
app.VERSION = "0.1"
app.VENDOR = "Aubo Robotics"

function p_Untitled_4()
    local _ENV = sched.select_robot(1)
    setCollisionStopType(1)
    setCollisionLevel(6)
    setFreedriveDamp({0.5,0.5,0.5,0.5,0.5,0.5})
    setHomePosition({0,-0.2617993877991494,1.74532925199433,0.4363323129985824,1.570796326794897,0}    )
    modbusDeleteAllSignals()
    setDigitalInputActionDefault()
    setDigitalOutputRunstateDefault()
    setPayload(10, {0,0,0}, {0,0,0}, {0,0,0,0,0,0,0,0,0})
    local agv =sched.jsonrpc.proxy('http://127.0.0.1:8989/jsonrpc')
    sleep(0)
    setTcpOffset({0,0,0,0,0,0})
    setToolVoltageOutputDomain(0)
    setToolIoInput(0, true)
    setToolIoInput(1, true)
    setToolIoInput(2, true)
    setToolIoInput(3, true)
    setPlanContext(sched.current_thread_id(), 1, "初始变量")
    u57fau5ea7 = {0,0,0,0,0,0}
    u5de5u5177 = {0,0,0,0,0,0}
    u8defu70b9_0_p = {0.001509353297760631,0.6403135241907759,0.7297228798628895,3.123632001741227,-0.002346201164195792,-3.054431490939011}    
    u8defu70b9_0_q = {1.884897540515698,0.1476995679804979,1.688847206043619,-0.01340857838088465,1.572054562301439,0.2291649168767647}    
    u8defu70b9_1_p = {0.02976325378272466,0.6396242448322511,0.7297252297805615,3.123628927903564,-0.002346923377281231,-3.098573677247809}    
    u8defu70b9_1_q = {1.840755344853215,0.1476982179424007,1.688842698478403,-0.01340857838088465,1.572054562301439,0.2291649168767647}    
    u8defu70b9_2_p = {0.07152545236125535,0.675527516853944,0.7297498234950491,3.123567336162959,-0.002342391030425735,-3.098564981451894}    
    u8defu70b9_2_q = {1.762808195238119,0.08429097863359991,1.633350063092808,-0.005348850940904652,1.573279046855554,0.1512569183664857}    
    u8defu70b9_3_p = {0.2197487460273758,0.5958187013480577,0.7297404061673278,3.1236103776645,-0.002362538777882478,-3.098567354723953}    
    u8defu70b9_3_q = {1.535774988516752,0.1560036523160618,1.695721242999434,-0.01511097642138964,1.577589718499751,-0.07578978873585215}    
    
    
    function str_cat(str1, str2)
        return tostring(str1) .. tostring(str2)
    end
    
    local function calculate_point_to_move_towards(feature, direction, position_distance)
        local posDir={direction[1], direction[2], direction[3]}
        if (math.norm(posDir) < 1e-6) then
            return getTargetTcpPose()
        end
        local direction_vector_normalized=math.normalize(posDir)
        local displacement_pose={direction_vector_normalized[1] * position_distance,direction_vector_normalized[2] * position_distance,direction_vector_normalized[3] * position_distance,0,0,0}

        local wanted_displacement_in_base_frame=poseSub(poseTrans(feature, displacement_pose), feature)
        return poseAdd(getTargetTcpPose(), wanted_displacement_in_base_frame)
    end
    setPlanContext(sched.current_thread_id(), 2, "机器人编程")
    while true do
        setPlanContext(sched.current_thread_id(), 3, "关节运动")
        setPlanContext(sched.current_thread_id(), 4, "路点_0")
        moveJoint(inverseKinematics(u8defu70b9_0_q, u8defu70b9_0_p), 1.39626, 1.0472, 0, 0)
        
        setPlanContext(sched.current_thread_id(), 5, "直线运动")
        setPlanContext(sched.current_thread_id(), 6, "路点_1")
        moveLine(u8defu70b9_1_p, 1.2, 0.25, 0, 0)
        
        setPlanContext(sched.current_thread_id(), 7, "样条曲线")
        setPlanContext(sched.current_thread_id(), 8, "路点_2")
        moveSpline(inverseKinematics(u8defu70b9_2_q, u8defu70b9_2_p), 1.39626, 1.0472, 0)
        moveSpline({}, 1.39626, 1.0472, 0.005)
        
        setPlanContext(sched.current_thread_id(), 9, "样条曲线")
        setPlanContext(sched.current_thread_id(), 10, "路点_3")
        moveSpline(inverseKinematics(u8defu70b9_3_q, u8defu70b9_3_p), 1.39626, 1.0472, 0)
        moveSpline({}, 1.39626, 1.0472, 0.005)
        sched.cancel_point()
    end
end

function app:start(api)
  --
  self.api = api
  print("start---")
  p_Untitled_4()
end

function app:robot_error_handler(name, err)
  --
  print("An error hanppen to robot "..name)
end

-- return our app object
return app


