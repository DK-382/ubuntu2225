--- Auto generated by 'aubo_scope' v0.28.4-rc.18 2025-02-11 16:50:51
--- DO NOT MODIFY IT!
local app = {}
local aubo = require('aubo')
local sched = sched or aubo.sched
local math = aubo.math or math

local sleep = sched.sleep
local thread = sched.thread
local sync = sched.sync
local run = sched.run
local kill = sched.kill
local halt = sched.halt

app.PRIORITY = 1000 -- set the app priority, which determines app execution order
app.VERSION = "0.1"
app.VENDOR = "Aubo Robotics"

function p_Untitled_5()
    local _ENV = sched.select_robot(1)
    setCollisionStopType(1)
    setCollisionLevel(6)
    setFreedriveDamp({0.5,0.5,0.5,0.5,0.5,0.5})
    setHomePosition({0,-0.2617993877991494,1.74532925199433,0.4363323129985824,1.570796326794897,0}    )
    modbusDeleteAllSignals()
    setDigitalInputActionDefault()
    setDigitalOutputRunstateDefault()
    setPayload(10, {0,0,0}, {0,0,0}, {0,0,0,0,0,0,0,0,0})
    local agv =sched.jsonrpc.proxy('http://127.0.0.1:8989/jsonrpc')
    sleep(0)
    setTcpOffset({0,0,0,0,0,0})
    setToolVoltageOutputDomain(0)
    setToolIoInput(0, true)
    setToolIoInput(1, true)
    setToolIoInput(2, true)
    setToolIoInput(3, true)
    setPlanContext(sched.current_thread_id(), 1, "初始变量")
    u57fau5ea7 = {0,0,0,0,0,0}
    u5de5u5177 = {0,0,0,0,0,0}
    u8defu70b9_0_p = {0.01814468841264842,0.5679490398034911,0.7536784868305699,3.070764173594622,0.005353916860185679,-3.080101966704959}    
    u8defu70b9_0_q = {1.901112848100556,0.2730870563294129,1.754573141362944,-0.02426828483435185,1.550066491813173,0.2700373202679531}    
    u8defu70b9_1_p = {0.01814341479510429,0.5344305107290258,0.7624402222077218,3.070771175687335,0.005357762444000366,-3.080093683543677}    
    u8defu70b9_1_q = {1.923283173731938,0.32794855448326,1.777007293447592,-0.05724971554770385,1.548732654173189,0.2920402411752888}    
    u8defu70b9_2_p = {0.01814468841264842,0.5679490398034911,0.7536784868305699,3.070764173594622,0.005353916860185679,-3.080101966704959}    
    u8defu70b9_2_q = {1.901112848100556,0.2730870563294129,1.754573141362944,-0.02426828483435185,1.550066491813173,0.2700373202679531}    
    u8defu70b9_3_p = {0.01814487911812064,0.5344270645971567,0.7536782207215145,3.070764451540734,0.005355327847276692,-3.080101931365194}    
    u8defu70b9_3_q = {1.923288573884327,0.3295402493997988,1.792745457402494,-0.04309726617529005,1.548738054325578,0.2920888425467862}    
    
    
    function str_cat(str1, str2)
        return tostring(str1) .. tostring(str2)
    end
    
    local function calculate_point_to_move_towards(feature, direction, position_distance)
        local posDir={direction[1], direction[2], direction[3]}
        if (math.norm(posDir) < 1e-6) then
            return getTargetTcpPose()
        end
        local direction_vector_normalized=math.normalize(posDir)
        local displacement_pose={direction_vector_normalized[1] * position_distance,direction_vector_normalized[2] * position_distance,direction_vector_normalized[3] * position_distance,0,0,0}

        local wanted_displacement_in_base_frame=poseSub(poseTrans(feature, displacement_pose), feature)
        return poseAdd(getTargetTcpPose(), wanted_displacement_in_base_frame)
    end
    setPlanContext(sched.current_thread_id(), 2, "机器人编程")
    while true do
        setPlanContext(sched.current_thread_id(), 3, "直线运动")
        setPlanContext(sched.current_thread_id(), 4, "路点_0")
        moveLine(u8defu70b9_0_p, 1.2, 0.25, 0, 0)
        
        setPlanContext(sched.current_thread_id(), 5, "Seeragv  Move To: LM2 forward")
        function waitForMotionComplete()
          sleep(0)
        end
        waitForMotionComplete()
        agv.robot_task_gotarget_req("LM2",-2147483648,-2147483648,-2147483648,-2147483648,"forward")
        while true do
            if (agv.robot_status_task_req()=="COMPLETED") then
                print("Navigation has completed.")
                break
            else
                sleep(0.1)
                print("Navigation is running...")
            end
        end
        
        setPlanContext(sched.current_thread_id(), 6, "直线运动")
        setPlanContext(sched.current_thread_id(), 7, "路点_1")
        moveLine(u8defu70b9_1_p, 1.2, 0.25, 0, 0)
        
        setPlanContext(sched.current_thread_id(), 8, "Seeragv  Move To: LM1 forward")
        function waitForMotionComplete()
          sleep(0)
        end
        waitForMotionComplete()
        agv.robot_task_gotarget_req("LM1",-2147483648,-2147483648,-2147483648,-2147483648,"forward")
        while true do
            if (agv.robot_status_task_req()=="COMPLETED") then
                print("Navigation has completed.")
                break
            else
                sleep(0.1)
                print("Navigation is running...")
            end
        end
        
        setPlanContext(sched.current_thread_id(), 9, "关节运动")
        setPlanContext(sched.current_thread_id(), 10, "路点_2")
        moveJoint(inverseKinematics(u8defu70b9_2_q, u8defu70b9_2_p), 1.39626, 1.0472, 0, 0)
        
        setPlanContext(sched.current_thread_id(), 11, "关节运动")
        setPlanContext(sched.current_thread_id(), 12, "路点_3")
        moveJoint(inverseKinematics(u8defu70b9_3_q, u8defu70b9_3_p), 1.39626, 1.0472, 0, 0)
        sched.cancel_point()
    end
end

function app:start(api)
  --
  self.api = api
  print("start---")
  p_Untitled_5()
end

function app:robot_error_handler(name, err)
  --
  print("An error hanppen to robot "..name)
end

-- return our app object
return app


