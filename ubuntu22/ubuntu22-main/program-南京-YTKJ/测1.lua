--- Auto generated by 'aubo_scope' v0.28.4-rc.18 2025-02-11 11:15:54
--- DO NOT MODIFY IT!
local app = {}
local aubo = require('aubo')
local sched = sched or aubo.sched
local math = aubo.math or math

local sleep = sched.sleep
local thread = sched.thread
local sync = sched.sync
local run = sched.run
local kill = sched.kill
local halt = sched.halt

app.PRIORITY = 1000 -- set the app priority, which determines app execution order
app.VERSION = "0.1"
app.VENDOR = "Aubo Robotics"

function p_u6d4b1()
    local _ENV = sched.select_robot(1)
    setCollisionStopType(1)
    setCollisionLevel(6)
    setFreedriveDamp({0.5,0.5,0.5,0.5,0.5,0.5})
    setHomePosition({0,-0.2617993877991494,1.74532925199433,0.4363323129985824,1.570796326794897,0}    )
    modbusDeleteAllSignals()
    setDigitalInputActionDefault()
    setDigitalOutputRunstateDefault()
    setPayload(10, {0,0,0}, {0,0,0}, {0,0,0,0,0,0,0,0,0})
    local agv =sched.jsonrpc.proxy('http://127.0.0.1:8989/jsonrpc')
    sleep(0)
    setTcpOffset({0,0,0,0,0,0})
    setToolVoltageOutputDomain(0)
    setToolIoInput(0, true)
    setToolIoInput(1, true)
    setToolIoInput(2, true)
    setToolIoInput(3, true)
    setPlanContext(sched.current_thread_id(), 1, "初始变量")
    u57fau5ea7 = {0,0,0,0,0,0}
    u5de5u5177 = {0,0,0,0,0,0}
    u8defu70b9_1_p = {-0.1650005657388598,-0.3207256054894199,0.3906724939701645,0.05231069987579405,-0.07155829096692976,-2.377396825968605}    
    u8defu70b9_1_q = {-1.463699154586157,0.1546711647141757,2.759319570237822,1.120665274405353,-1.593981881075335,0.6554866973849868}    
    u8defu70b9_0_p = {-0.1650022397937213,-0.3207281064217494,0.4078136797149502,0.05231743196025924,-0.07154450941892132,-2.377386092239461}    
    u8defu70b9_0_q = {-1.463747755957655,0.2130765128730392,2.74382368791333,1.04676553900551,-1.593637621360562,0.6556487019566446}    
    u8defu70b9_2_p = {-0.1650002539408899,-0.3207259180961516,0.4078148728923973,0.05230962486979716,-0.0715559306168686,-2.377396239290493}    
    u8defu70b9_2_q = {-1.46374505588146,0.2130859631397192,2.743825941695938,1.046758788815024,-1.59365247177963,0.6556365516137703}    
    
    
    function str_cat(str1, str2)
        return tostring(str1) .. tostring(str2)
    end
    
    local function calculate_point_to_move_towards(feature, direction, position_distance)
        local posDir={direction[1], direction[2], direction[3]}
        if (math.norm(posDir) < 1e-6) then
            return getTargetTcpPose()
        end
        local direction_vector_normalized=math.normalize(posDir)
        local displacement_pose={direction_vector_normalized[1] * position_distance,direction_vector_normalized[2] * position_distance,direction_vector_normalized[3] * position_distance,0,0,0}

        local wanted_displacement_in_base_frame=poseSub(poseTrans(feature, displacement_pose), feature)
        return poseAdd(getTargetTcpPose(), wanted_displacement_in_base_frame)
    end
    setPlanContext(sched.current_thread_id(), 2, "机器人编程")
    while true do
        setPlanContext(sched.current_thread_id(), 3, "直线运动")
        setPlanContext(sched.current_thread_id(), 4, "路点_1")
        moveLine(u8defu70b9_1_p, 1.2, 0.25, 0, 0)
        
        setPlanContext(sched.current_thread_id(), 5, "直线运动")
        setPlanContext(sched.current_thread_id(), 6, "路点_0")
        moveLine(u8defu70b9_0_p, 1.2, 0.25, 0, 0)
        
        setPlanContext(sched.current_thread_id(), 7, "直线运动")
        setPlanContext(sched.current_thread_id(), 8, "路点_2")
        moveLine(u8defu70b9_2_p, 1.2, 0.25, 0, 0)
        sched.cancel_point()
    end
end

function app:start(api)
  --
  self.api = api
  print("start---")
  p_u6d4b1()
end

function app:robot_error_handler(name, err)
  --
  print("An error hanppen to robot "..name)
end

-- return our app object
return app


