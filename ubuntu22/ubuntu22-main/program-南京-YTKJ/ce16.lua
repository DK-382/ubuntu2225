--- Auto generated by 'aubo_scope' v0.28.4-rc.18 2025-02-12 15:14:10
--- DO NOT MODIFY IT!
local app = {}
local aubo = require('aubo')
local sched = sched or aubo.sched
local math = aubo.math or math

local sleep = sched.sleep
local thread = sched.thread
local sync = sched.sync
local run = sched.run
local kill = sched.kill
local halt = sched.halt

app.PRIORITY = 1000 -- set the app priority, which determines app execution order
app.VERSION = "0.1"
app.VENDOR = "Aubo Robotics"

function p_ce16()
    local _ENV = sched.select_robot(1)
    setCollisionStopType(1)
    setCollisionLevel(6)
    setFreedriveDamp({0.5,0.5,0.5,0.5,0.5,0.5})
    setHomePosition({0,-0.2617993877991494,1.74532925199433,0.4363323129985824,1.570796326794897,0}    )
    modbusDeleteAllSignals()
    setDigitalInputActionDefault()
    setDigitalOutputRunstateDefault()
    setPayload(10, {0,0,0}, {0,0,0}, {0,0,0,0,0,0,0,0,0})
    local agv =sched.jsonrpc.proxy('http://127.0.0.1:8989/jsonrpc')
    sleep(0)
    setTcpOffset({0,0,0,0,0,0})
    setToolVoltageOutputDomain(0)
    setToolIoInput(0, true)
    setToolIoInput(1, true)
    setToolIoInput(2, true)
    setToolIoInput(3, true)
    setPlanContext(sched.current_thread_id(), 1, "初始变量")
    u57fau5ea7 = {0,0,0,0,0,0}
    u5de5u5177 = {0,0,0,0,0,0}
    u8defu70b9_0_p = {0.2013000000000004,0.7030000000000001,0.7162000000000004,3.14159265,0,3.14159265}    
    u8defu70b9_0_q = {1.570796325,0,1.570796325,0,1.570796325,0}    
    u8defu70b9_2_p = {0.9218855737091013,-0.4953894191537618,0.5722142467764999,-3.141592565879199,-1.815236925e-07,2.558405131384534}    
    u8defu70b9_2_q = {-0.2995397588951096,-0.5291129471323441,1.134263283049506,0.0926094598127597,1.570791355571978,-1.287136242153473}    
    u8defu70b9_3_p = {0.8678498267104469,-0.5784420942479581,0.5722142092570895,-3.141592559372941,-1.886575171e-07,2.530656988720364}    
    u8defu70b9_3_q = {-0.3936753395298522,-0.5228996483387774,1.143847529207363,0.0959494779058262,1.570795185447789,-1.353533635862993}    
    
    
    function str_cat(str1, str2)
        return tostring(str1) .. tostring(str2)
    end
    
    local function calculate_point_to_move_towards(feature, direction, position_distance)
        local posDir={direction[1], direction[2], direction[3]}
        if (math.norm(posDir) < 1e-6) then
            return getTargetTcpPose()
        end
        local direction_vector_normalized=math.normalize(posDir)
        local displacement_pose={direction_vector_normalized[1] * position_distance,direction_vector_normalized[2] * position_distance,direction_vector_normalized[3] * position_distance,0,0,0}

        local wanted_displacement_in_base_frame=poseSub(poseTrans(feature, displacement_pose), feature)
        return poseAdd(getTargetTcpPose(), wanted_displacement_in_base_frame)
    end
    setPlanContext(sched.current_thread_id(), 2, "机器人编程")
    setPlanContext(sched.current_thread_id(), 3, "关节运动")
    setPlanContext(sched.current_thread_id(), 4, "路点_0")
    moveJoint(inverseKinematics(u8defu70b9_0_q, u8defu70b9_0_p), 1.39626, 1.0472, 0, 0)
    
    setPlanContext(sched.current_thread_id(), 5, "关节运动")
    setPlanContext(sched.current_thread_id(), 6, "路点_2")
    moveJoint(inverseKinematics(u8defu70b9_2_q, u8defu70b9_2_p), 1.39626, 1.0472, 0, 0)
    
    setPlanContext(sched.current_thread_id(), 7, "关节运动")
    setPlanContext(sched.current_thread_id(), 8, "路点_3")
    moveJoint(inverseKinematics(u8defu70b9_3_q, u8defu70b9_3_p), 1.39626, 1.0472, 0, 0)
end

function app:start(api)
  --
  self.api = api
  print("start---")
  p_ce16()
end

function app:robot_error_handler(name, err)
  --
  print("An error hanppen to robot "..name)
end

-- return our app object
return app


