--- Auto generated by 'webscope' 0.31.0-alpha.58 2024-07-25 10:41:57
--- DO NOT MODIFY IT!
local app = {}
local aubo = require('aubo')
local sched = sched or aubo.sched
local math = aubo.math or math
local realtime = aubo.realtime or realtime

local sleep = sched.sleep
local thread = sched.thread
local sync = sched.sync
local run = sched.run
local kill = sched.kill
local halt = sched.halt



app.PRIORITY = 1000 -- set the app priority, which determines app execution order
app.VERSION = "0.1"
app.VENDOR = "Aubo Robotics"

function p_newSeer()
    local _ENV = sched.select_robot(1)
    local agv =sched.jsonrpc.proxy('http://127.0.0.1:8990/jsonrpc')
    setCollisionStopType(1)
    setCollisionLevel(6)
    setHardwareCustomParameters("[over_force_config] \n is_enable = true")
    setHomePosition({0,-0.26179938779914946,1.7453292519943295,0.4363323129985824,1.5707963267948966,0})
    modbusDeleteAllSignals()
    setDigitalInputActionDefault()
    setDigitalOutputRunstateDefault()
    setPayload(0, {0,0,0}, {0,0,0}, {0,0,0,0,0,0,0,0,0})
    setTcpOffset({0,0.1,0,0,0,0})
    sleep(0)
    setToolVoltageOutputDomain(0)
    setToolIoInput(0,true)
    setToolIoInput(1,true)
    setToolIoInput(2,true)
    setToolIoInput(3,true)
    setFreedriveDamp({0.5,0.5,0.5,0.5,0.5,0.5})
    setHardwareCustomParameters("handle_enable=false")
    setPlanContext(sched.current_thread_id(), 1, "初始变量")
    u57fau5ea7 = {0,0,0,0,0,0}
    u5de5u5177 = {0,0,0,0,0,0}
    u8defu70b9_1_p={-0.48716791182726016,-0.12931604765493193,0.46728818885246504,3.1008464412910626,0.004912020228759061,-1.5541341343294228}
    u8defu70b9_1_q={0.016979998172165906,-0.07163309953610766,-1.4387967869823914,0.16288749657342497,-1.5757172156590051,0.00011745331445196988}
    u8defu70b9_0_p={-0.4951949916325865,-0.13432446059596295,0.3669614739675372,-3.0930999081189543,-0.046517112724106933,-1.5561291775566115}
    u8defu70b9_0_q={0.017045357867811358,-0.04274524095212352,-1.674052250110359,-0.012076090778998511,-1.5242186624051561,0.00012150342874341712}

    function str_cat(str1, str2)
      return tostring(str1) .. tostring(str2)
    end

    local function calculate_point_to_move_towards(feature, direction, position_distance)
      local posDir={direction[1], direction[2], direction[3]}
      if (math.norm(posDir) < 1e-6) then
          return getTargetTcpPose()
      end
      local direction_vector_normalized=math.normalize(posDir)
      local displacement_pose={direction_vector_normalized[1] * position_distance,direction_vector_normalized[2] * position_distance,direction_vector_normalized[3] * position_distance,0,0,0}
    
      local wanted_displacement_in_base_frame=poseSub(poseTrans(feature, displacement_pose), feature)
      return poseAdd(getTargetTcpPose(), wanted_displacement_in_base_frame)
    end
    setPlanContext(sched.current_thread_id(), 2, "机器人编程")
    setPlanContext(sched.current_thread_id(), 3, "ARM 移动: LM1 向前, 路径: LM4->LM3->LM2")
    if (not agv.hasConnected()) then
        agv.disconnect()
        textmsg("AGV disconnected.")
    else
        textmsg("AGV connected.")
        local v = 0.8
        local w = 5
        local str = "LM4,LM3,LM2,LM1"
        local target_x = -0.615
        local target_y = 0.314
        local target_yaw = 1.5733
        local forward_flag = "forward"
        textmsg(setNavGoal)
        agv.setNavGoal(v, w, str, target_x, target_y, target_yaw, forward_flag)
        while true do
            if (agv.getNavStatus() == 1) then
                textmsg("Navigation has completed.")
                break
            else
                if (not agv.hasConnected()) then
                    agv.disconnect()
                    textmsg("AGV disconnected.")
                    sleep(0.5)
                    break
                end
                textmsg("Navigation is running...")
            end
        end
    end

    setPlanContext(sched.current_thread_id(), 4, "等待: 1")
    sleep(1)

    setPlanContext(sched.current_thread_id(), 5, "ARM 移动: LM2 向前, 路径: LM1->LM2->LM3")
    if (not agv.hasConnected()) then
        agv.disconnect()
        textmsg("AGV disconnected.")
    else
        textmsg("AGV connected.")
        local v = 0.8
        local w = 5
        local str = "LM1,LM2,LM3,LM2"
        local target_x = -0.615
        local target_y = -1.974
        local target_yaw = 1.5733
        local forward_flag = "forward"
        textmsg(setNavGoal)
        agv.setNavGoal(v, w, str, target_x, target_y, target_yaw, forward_flag)
        while true do
            if (agv.getNavStatus() == 1) then
                textmsg("Navigation has completed.")
                break
            else
                if (not agv.hasConnected()) then
                    agv.disconnect()
                    textmsg("AGV disconnected.")
                    sleep(0.5)
                    break
                end
                textmsg("Navigation is running...")
            end
        end
    end

    setPlanContext(sched.current_thread_id(), 6, "等待: 1")
    sleep(1)

    setPlanContext(sched.current_thread_id(), 7, "关节运动")
    setPlanContext(sched.current_thread_id(), 8, "路点_1")
    moveJoint(inverseKinematics(u8defu70b9_1_q, u8defu70b9_1_p), 1.3962634015954636, 1.0471975511965976, 0, 0)

    setPlanContext(sched.current_thread_id(), 9, "路点_0")
    moveJoint(inverseKinematics(u8defu70b9_0_q, u8defu70b9_0_p), 1.3962634015954636, 1.0471975511965976, 0, 0)
end


function app:start(api)
  --
  self.api = api
  print("start---")
  p_newSeer()
end

function app:robot_error_handler(name, err)
  --
  print("An error hanppen to robot "..name)
end

-- return our app object
return app

