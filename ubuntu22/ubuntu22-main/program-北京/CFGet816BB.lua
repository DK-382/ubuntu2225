--- Auto generated by 'aubo_scope' v0.31.0-alpha.58 2024-10-29 15:38:54
--- DO NOT MODIFY IT!
local app = {}
local aubo = require('aubo')
local sched = sched or aubo.sched
local math = aubo.math or math
local realtime = aubo.realtime or realtime

local sleep = sched.sleep
local thread = sched.thread
local sync = sched.sync
local run = sched.run
local kill = sched.kill
local halt = sched.halt

app.PRIORITY = 1000 -- set the app priority, which determines app execution order
app.VERSION = "0.1"
app.VENDOR = "Aubo Robotics"

function p_CFGet816BB()
    local _ENV = sched.select_robot(1)
    setCollisionStopType(1)
    setCollisionLevel(2)
    setHardwareCustomParameters("[over_force_config] \n    is_enable =true")
    setHardwareCustomParameters("handle_enable=false")
    setFreedriveDamp({0.5,0.5,0.5,0.5,0.5,0.5})
    gripper_service = sched.jsonrpc.proxy('http://127.0.0.1:8890/jsonrpc')
    setHomePosition({0,-0.2617993877991494,1.74532925199433,0.4363323129985824,1.570796326794897,0}    )
    modbusDeleteAllSignals()
    setDigitalInputActionDefault()
    setDigitalOutputRunstateDefault()
    modbusAddSignal("/dev/ttyUSB0,115200,N,8,1", 9, 1000, 3, "control", false)
    modbusAddSignal("192.168.192.5,502", 1, 0, 3, "agvGo", true)
    modbusAddSignal("192.168.192.5,502", 1, 18, 0, "agvOK", true)
    modbusAddSignal("192.168.192.5,502", 1, 8, 2, "agvOver", true)
    modbusAddSignal("192.168.192.5,502", 1, 110, 3, "start", true)
    modbusAddSignal("192.168.192.5,502", 1, 111, 3, "finish", true)
    setPayload(3, {0,0,0}, {0,0,0}, {0,0,0,0,0,0,0,0,0})
    local agv =sched.jsonrpc.proxy('http://127.0.0.1:8989/jsonrpc')
    setTcpOffset({0,0,0,0,0,0})
    setToolVoltageOutputDomain(0)
    setToolIoInput(0, true)
    setToolIoInput(1, true)
    setToolIoInput(2, true)
    setToolIoInput(3, true)
    u5e73u9762_0= {}
    tableUp = 0
    tableGet = 0
    point_get = 0
    point_up = 0
    gdddd = 0
    PUT22 = 0
    PutUpJointRad = 0
    GetDeg = 0
    GetUpDeg = 0
    currentPointA = 0
    currentJointDeg = 0
    msg_AGV_G011 = 0
    setLabel(1, "初始变量")
    u57fau5ea7 = {0,0,0,0,0,0}
    u5de5u5177 = {0,0,0,0,0,0}
    homeB_p = {-0.4440595213527789,0.008715382730933733,0.4166982710665085,3.141548696546882,0.0002950484368508126,-1.13829171193399}    
    homeB_q = {-0.2966736544469147,-0.1252466968271457,-1.738953343519186,-0.04313967774947407,-1.570987064252848,-0.7291782976661169}    
    pzdB_p = {-0.389928570074238,0.0423186914952163,0.2945990462191183,3.141239726434327,0.0006563320463699957,-1.13974442878606}    
    pzdB_q = {-0.4230225785421997,-0.2003879790901278,-2.133618063846092,-0.3631604519124377,-1.570961388056586,-0.8540746523442558}    
    u8defu70b9_0_p = {-0.4444218383374269,0.1489216203841411,0.3427235281253589,2.595033723028563,0.2439135862433988,-1.208856825442054}    
    u8defu70b9_0_q = {-0.6555741616651132,-0.07584242127521515,-2.077272818247295,-0.926683267347303,-1.230476685472202,-0.9992258578456747}    
    u8defu70b9_1_p = {-0.4113770479654194,-0.1514184003543229,0.3429554511845085,2.595171082330687,0.2445199188623536,-1.206251298588273}    
    u8defu70b9_1_q = {0.08407544661973308,-0.1321325555106045,-2.150430091427626,-1.038781872202475,-1.625743386797203,-0.3660435219499419}    
    getDAup_p = {-0.561567123497571,-0.006458627806895023,0.1130794966766896,-3.137758598503598,-0.009838741733118911,-1.139888684901223}    
    getDAup_q = {-0.2075310241361525,0.4847381203307634,-1.906430653428122,-0.8114301583798493,-1.565180575869427,-0.6384826364099739}    
    getDA_p = {-0.5615850719442992,-0.00644899802641226,0.03306479219313709,-3.137921176470273,-0.009709119395490995,-1.139881544981492}    
    getDA_q = {-0.207540209363387,0.6504641135803232,-1.931953338170369,-1.002886549827137,-1.565187911925502,-0.6384973085221243}    
    
    setLabel(2, "机器人编程")
    while true do
        setLabel(3, "关节运动")
        setLabel(4, "等待：2.00s")
        sleep(2)
        
        setLabel(5, "homeB")
        setTcpOffset({0,0,0,0,0,0})
        moveJoint(inverseKinematics(homeB_q, homeB_p), 1.15192, 0.872665, 0, 0)
        
        setLabel(6, "pzdB")
        setTcpOffset({0,0,0,0,0,0})
        moveJoint(inverseKinematics(pzdB_q, pzdB_p), 1.15192, 0.872665, 0, 0)
        
        setLabel(7, "等待：3.00s")
        sleep(3)
        
        setLabel(8, "CfgetA.lua")
        --subscript context start
            --自定义函数区
            --分割字符串函数输出列表
        function string.split(str,delimiter)
        	if str  ==  nil or str ==  ''  or  delimiter  == nil then
           return  nil
        	end
        	local  result =  {}
        	for match in  (str..delimiter):gmatch("(.-)"..delimiter) do
           table.insert(result,match)
        	end
        	return result
        end
            pi = 3.1416
            --弧度转换函数单个
            function toRad(degs)
                if degs==nil or degs=="" then
                    return nil
                end
                return degs*(pi/180) 
            end
            -- 弧度转角度单个
            function toDeg(rads)
                if rads==nil or rads =="" then
                    return nil
                end
                return rads*(180/pi)
            end
            
            -- 将角度列表转换为弧度列表
            function degToRadList(degrees)
                if degrees==nil or degrees=="" then
                    return nil
                end
                local radians = {}
                for i , j in ipairs(degrees) do
                    radians[i] =j*(pi/180)
                end
                return radians
            end
            
            -- 将弧度列表转换为角度列表
            function radToDegList(radians)
                if radians==nil or radians=="" then
                    return nil
                end
                local degrees = {}
                for a , b in ipairs(radians) do
                    degrees[a] =b*(180/pi)
                end
                return degrees
            end
        ----------------------------------------------------------
        -- 变量清理
        GetDeg={0}
        GetRad={0}
        GetUpRad={0}
        GetUpDeg={0}
        currentJointA={0}
        currentJointDeg={0}
        currentPosA={0}
        currentPoseOK={0}
        --modbusSetOutputSignal('control', 811)
        sleep(0.2)
        ----------------------------------------------------------
        ip = "192.168.192.111" --服务端IP地址
        port = 55000 --串口号
        client_name = "sokdefkj8iyh" --客户端名称
        rec_key = "camera_sendA" --接收服务端发送的字符串
        socketOpen(ip, port, client_name) ----与服务端建立通信
        sleep(0.5)
        -- 触发拍照数据
        -- 201,1,固定，之后是关节角，位姿
        -- msg_AGV_G01="201,1,-24.24,-11.48,-122.25,-20.81,-90.01,-48.94,-389.93,42.32,294.59,179.966,0.0573,-65.317"
        -- GET Current point
        currentPosA=getTcpPose()
        currentPosOK={currentPosA[1]*1000,currentPosA[2]*1000,currentPosA[3]*1000,toDeg(currentPosA[4]),toDeg(currentPosA[5]),toDeg(currentPosA[6])}
        currentJointA = getJointPositions()
        currentJointDeg=radToDegList(currentJointA)
        sleep(0.5)
        ----------------------------------------------------------------------------------------------
        msgAgvGsend="201,1,"..table.concat(currentJointDeg,",")..","..table.concat(currentPosOK,",")
        socketSendLine(msgAgvGsend, client_name) --发送给服务端字符串
        sleep(3)
        --接收数据
        msg_send_G03="205,1"
        socketSendLine(msg_send_G03, client_name) --发送给服务端字符串
        sleep(2)
        rec_str = ""
        -- ------------------------------------------------
        --接收服务端发送的字符串后停止循环
        while(rec_str == nil or rec_str == "") 
        do
          socketReadString(rec_key, client_name, "", "", true) 
          rec_str = getString(rec_key, "")
        end
        PointAll=string.split(rec_str,",")
        sleep(1.2)
        --数据处理
        textmsg(PointAll[2])
        textmsg(PointAll[3])
        textmsg(PointAll[4])
        textmsg(type(PointAll[3]))
        textmsg(type(PointAll))
        sleep(1)
        if PointAll[3]=="2100" then
            GetUpDeg={PointAll[7],PointAll[8],PointAll[9],PointAll[10],PointAll[11],PointAll[12]}
            GetDeg={PointAll[15],PointAll[16],PointAll[17],PointAll[18],PointAll[19],PointAll[20]}
            GetUpRad=degToRadList(GetUpDeg)
            GetRad=degToRadList(GetDeg)
            sleep(0.1)
            ---------------------------主控部分--------------------------------
            --机械臂移动控制区
            -- if GetRad ~={0} and GetUpRad ~= {0} then
            moveJoint(GetUpRad, 1.0, 1.0, 0, 0)
            moveJoint(GetRad, 1.0, 1.0, 0, 0)
            sleep(1)
            modbusSetOutputSignal('control', 1035)    --抓取
            sleep(2)
            moveJoint(GetUpRad, 1.0, 1.0, 0, 0)
            socketReadString(rec_key, client_name, "", "", true) 
            textmsg("script running finish normally")
            rec_key="ABC"
            -- end
        end
        -- 结束循环之后
        socketClose(client_name)
        --subscript context end
        
        setLabel(9, "关节运动")
        setLabel(10, "路点_0")
        moveJoint(inverseKinematics(u8defu70b9_0_q, u8defu70b9_0_p), 1.39626, 1.0472, 0, 0)
        
        setLabel(11, "等待：1.00s")
        sleep(1)
        
        setLabel(12, "路点_1")
        moveJoint(inverseKinematics(u8defu70b9_1_q, u8defu70b9_1_p), 1.39626, 1.0472, 0, 0)
        
        setLabel(13, "等待：1.00s")
        sleep(1)
        
        setLabel(14, "getDAup")
        moveJoint(inverseKinematics(getDAup_q, getDAup_p), 1.39626, 1.0472, 0, 0)
        
        setLabel(15, "getDA")
        moveJoint(inverseKinematics(getDA_q, getDA_p), 1.39626, 1.0472, 0, 0)
        
        setLabel(16, "设置 control=811")
        modbusSetOutputSignal('control', 811)
        
        setLabel(17, "等待：1.50s")
        sleep(1.5)
        
        setLabel(18, "getDAup")
        moveJoint(inverseKinematics(getDAup_q, getDAup_p), 1.39626, 1.0472, 0, 0)
        
        setLabel(19, "homeB")
        moveJoint(inverseKinematics(homeB_q, homeB_p), 1.39626, 1.0472, 0, 0)
        
        setLabel(20, "等待：5.00s")
        sleep(5)
        sched.cancel_point()
    end
end

function app:start(api)
  --
  self.api = api
  print("start---")
  p_CFGet816BB()
end

function app:robot_error_handler(name, err)
  --
  print("An error hanppen to robot "..name)
end

-- return our app object
return app


