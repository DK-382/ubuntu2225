--- Auto generated by 'webscope' 0.31.0-alpha.58 2025-02-26 11:07:08
--- DO NOT MODIFY IT!
local app = {}
local aubo = require('aubo')
local sched = sched or aubo.sched
local math = aubo.math or math
local realtime = aubo.realtime or realtime

local sleep = sched.sleep
local thread = sched.thread
local sync = sched.sync
local run = sched.run
local kill = sched.kill
local halt = sched.halt



app.PRIORITY = 1000 -- set the app priority, which determines app execution order
app.VERSION = "0.1"
app.VENDOR = "Aubo Robotics"

function p_AUBO226()
    local _ENV = sched.select_robot(1)
    local agv =sched.jsonrpc.proxy('http://127.0.0.1:8990/jsonrpc')
    setCollisionStopType(1)
    setCollisionLevel(0)
    setHardwareCustomParameters("[over_force_config] \n is_enable = true")
    setHomePosition({0,-0.26179938779914946,1.7453292519943295,0.4363323129985824,1.5707963267948966,0})
    modbusDeleteAllSignals()
    setDigitalInputActionDefault()
    setDigitalOutputRunstateDefault()
    modbusAddSignal("/dev/ttyUSB0,115200,N,8,1",9,1000,3,"control",false)
    modbusAddSignal("192.168.192.5,502",1,0,3,"agvGo",false)
    modbusAddSignal("192.168.192.5,502",1,18,0,"agvOK",false)
    modbusAddSignal("192.168.192.5,502",1,8,2,"agvOver",false)
    modbusAddSignal("192.168.192.5,502",1,110,3,"start",false)
    modbusAddSignal("192.168.192.5,502",1,111,3,"finish",false)
    setPayload(3, {0,0,0}, {0,0,0}, {0,0,0,0,0,0,0,0,0})
    setTcpOffset({0,0,0,0,0,0})
    sleep(0)
    setToolVoltageOutputDomain(0)
    setToolIoInput(0,true)
    setToolIoInput(1,true)
    setToolIoInput(2,true)
    setToolIoInput(3,true)
    setFreedriveDamp({0.5,0.5,0.5,0.5,0.5,0.5})
    setHardwareCustomParameters("handle_enable=false")
    tableUp = 0
    tableGet = 0
    point_get = 0
    point_up = 0
    gdddd = 0
    PUT22 = 0
    PutUpJointRad = 0
    GetDeg = 0
    GetUpDeg = 0
    currentPointA = 0
    currentJointDeg = -104.08111479178,0.52557182571702,-63.90065752709,25.568313085185,-89.995796462692,-37.864473384281
    msg_AGV_G011 = 0
    setPlanContext(sched.current_thread_id(), 1, "初始变量")
    u57fau5ea7 = {0,0,0,0,0,0}
    u5de5u5177 = {0,0,0,0,0,0}
    homeB_p={-0.4419816493442164,-0.02939541361270802,0.4153714821372347,-3.141575261292409,0.000001180186897213941,-1.166830123880053}
    homeB_q={-0.2114408691956353,-0.1281247346939537,-1.744902309024726,-0.0459677273664152,-1.570807330879009,-0.6154070720258279}
    pzdGG_p={-0.009486040253312372,0.4615939708637831,0.5982979954109118,3.141479516352328,-3.156986865342584e-7,-2.726497438370247}
    pzdGG_q={-1.816562390165835,0.00917298026484779,-1.115285599524292,0.4462486230187286,-1.570726634262183,-0.660861275466988}
    agvUP_p={-0.5524442540536315,-0.006531594773912054,0.3014491994799465,3.141247803054362,-0.0005380422192934285,-2.747081223725982}
    agvUP_q={-0.2099099979898864,0.2029200400644366,-1.710286249320331,-0.3430486541826217,-1.570774318626671,0.9663749987414924}
    putAGV_p={-0.5522043247021646,-0.006597136421074571,0.2100630058796257,-3.141394810130265,0.0001380151445796514,-2.747088018862654}
    putAGV_q={-0.2098946892778289,0.3047382839588002,-1.849427133210854,-0.5831430974076515,-1.570711962150033,0.9663970069097175}
    goUP_p={-0.5524360672876869,-0.006534749082319861,0.3014435777824375,3.14129981660956,-0.0004885307550774735,-2.747062901431747}
    goUP_q={-0.2099099979898864,0.2029139165796136,-1.710289311062742,-0.3429752936218709,-1.570759646514521,0.9663566586013047}
    get22_p={-0.5521765604147879,-0.006590036594809344,0.2078094327572521,-3.141356222988641,0.0002777747489833298,-2.747062957204913}
    get22_q={-0.2099099979898864,0.3078673847033511,-1.85221944229014,-0.5889275776228475,-1.570759646514521,0.9663566586013047}
    pzdFF_p={-0.02598907881641912,0.615475342805253,0.5355738299264959,3.141549062842,0.00000838170831235119,-2.771096751763251}
    pzdFF_q={-1.727131956068392,0.3701279166411614,-0.8555641142417463,0.3450624015752295,-1.570781654682746,-0.5268315309753816}
    backAA_p={-0.08472263169002654,0.4365355913241987,0.5735406136115926,3.138755587440682,0.001718044826290097,-2.770665876352748}
    backAA_q={-1.655784172653256,-0.06086743914057879,-1.255981848559857,0.3723782063707685,-1.5710897690379,-0.4559138768976388}
    UUUPPP_p={-0.0315269285881425,0.6330002112878919,0.4306754489860602,3.141437565418068,-0.0003217622331080581,1.959044059286706}
    UUUPPP_q={-1.713935846274836,0.3609181954673756,-1.15419728383202,0.05532486689017239,-1.570763314542559,1.039409104996894}
    u8defu70b9_3_p={-0.03153869258398374,0.6329416054382699,0.5345490399616373,3.141548831121247,-0.0001614156772828101,1.959058102027603}
    u8defu70b9_3_q={-1.713932784532425,0.4257597762580788,-0.7779183266861588,0.3669568609312887,-1.570752310458446,1.039398100912781}
    gggdddqqqq_p={-0.03225461157169209,0.4427784375934753,0.5108889377703916,1.659338709979665,0.3537057601147411,-3.13171699358341}
    gggdddqqqq_q={-1.826806980274707,-0.09503648445289566,-1.967178684614653,-1.786755145532932,-1.33647535970095,-0.3748504572680685}
    BBqqUUP_p={-0.02743497273986096,0.5218158448776277,0.3291148042068732,1.644079003486472,0.3529710541146492,-3.136724188993703}
    BBqqUUP_q={-1.789423105430318,0.35896480380884,-2.015440930247094,-2.304280889377082,-1.373148304020247,-0.367635446118233}
    BBuupput_p={-0.02743523388348044,0.5218162282729435,0.2155555198342593,1.644037800473042,0.3529795781628976,-3.136734773495467}
    BBuupput_q={-1.789423105430318,0.6139191561566838,-2.060656742180096,-2.604490644109308,-1.373144635992209,-0.367635446118233}
    u8defu70b9_0_p={-0.4444218383374269,0.1489216203841411,0.3427235281253589,2.595033723028563,0.2439135862433988,-1.208856825442054}
    u8defu70b9_0_q={-0.6555741616651132,-0.07584242127521515,-2.077272818247295,-0.926683267347303,-1.230476685472202,-0.9992258578456747}

    function str_cat(str1, str2)
      return tostring(str1) .. tostring(str2)
    end

    local function calculate_point_to_move_towards(feature, direction, position_distance)
      local posDir={direction[1], direction[2], direction[3]}
      if (math.norm(posDir) < 1e-6) then
          return getTargetTcpPose()
      end
      local direction_vector_normalized=math.normalize(posDir)
      local displacement_pose={direction_vector_normalized[1] * position_distance,direction_vector_normalized[2] * position_distance,direction_vector_normalized[3] * position_distance,0,0,0}
    
      local wanted_displacement_in_base_frame=poseSub(poseTrans(feature, displacement_pose), feature)
      return poseAdd(getTargetTcpPose(), wanted_displacement_in_base_frame)
    end
    setPlanContext(sched.current_thread_id(), 2, "机器人编程")
    setPlanContext(sched.current_thread_id(), 3, "关节运动")
    setPlanContext(sched.current_thread_id(), 4, "homeB")
    setTcpOffset({0,0,0,0,0,0})
    sleep(0)
    moveJoint(inverseKinematics(homeB_q, homeB_p), 1.1519173063162573, 0.8726646259971648, 0, 0)

    setPlanContext(sched.current_thread_id(), 5, "Set start=0")
    modbusSetOutputSignal('start', 0)

    setPlanContext(sched.current_thread_id(), 6, "Set finish=0")
    modbusSetOutputSignal('finish', 0)

    setPlanContext(sched.current_thread_id(), 7, "abc-func.lua")
    --分割字符串函数输出列表
    function string.split(str,delimiter)
    	if str  ==  nil or str ==  ''  or  delimiter  == nil then
       return  nil
    	end
    	local  result =  {}
    	for match in  (str..delimiter):gmatch("(.-)"..delimiter) do
       table.insert(result,match)
    	end
    	return result
    end
    
    --自定义函数区
    pi = 3.1416
    --弧度转换函数单个
    function toRad(degs)
        if degs==nil or degs=="" then
            return nil
        end
        return degs*(pi/180) 
    end
    -- 弧度转角度单个
    function toDeg(rads)
        if rads==nil or rads =="" then
            return nil
        end
        return rads*(180/pi)
    end
    
    -- 将角度列表转换为弧度列表
    function degToRadList(degrees)
        local radians = {}
        for i,j in ipairs(degrees) do
            radians[i] =j*(pi/180)
        end
        return radians
    end
    
    -- 将弧度列表转换为角度列表
    function radToDegList(radians)
        local degrees = {}
        for a,b in ipairs(radians) do
            degrees[a] =b*(180/pi)
        end
        return degrees
    end
    ---------------------------------------
    
    
    
    -- 定义一个全局变量作为计数器，模拟种子变化---OKOK
    local counter = math.random(1, 1000000)
    
    -- 定义一个函数来生成随机客户端名称
    function generateRandomClientName(length)
        -- 定义字符集，包括大小写字母和数字
        local charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
        local client_name = ""
    
        -- 循环生成随机字符直到达到指定长度
        for i = 1, length do
            -- 使用计数器模拟种子变化
            local random_value = ((counter % #charset) + 1)
            client_name = client_name .. charset:sub(random_value, random_value)
            counter = (counter + 1) % 1000000 -- 更新计数器
        end
        return client_name
    end
    

    setPlanContext(sched.current_thread_id(), 8, "等待: 1")
    sleep(1)

    setPlanContext(sched.current_thread_id(), 9, "Set start=1")
    modbusSetOutputSignal('start', 1)

    setPlanContext(sched.current_thread_id(), 10, "Set control=811")
    modbusSetOutputSignal('control', 811)

    setPlanContext(sched.current_thread_id(), 11, "等待: 1")
    sleep(1)

    setPlanContext(sched.current_thread_id(), 12, "AGVgo4.lua")
        modbusSetOutputSignal('agvGo', 4)
    
        sleep(2)
    
        sched.sync_program_point()
        while not (modbusGetSignalStatus('agvOver') == 4) do
            sync()
        end
        
        sleep(2)

    setPlanContext(sched.current_thread_id(), 13, "等待: start==2")
    sched.sync_program_point()
    while not (modbusGetSignalStatus('start')==2) do
        sync()
    end

    setPlanContext(sched.current_thread_id(), 14, "等待: 1")
    sleep(1)

    setPlanContext(sched.current_thread_id(), 15, "关节运动")
    setPlanContext(sched.current_thread_id(), 16, "homeB")
    setTcpOffset({0,0,0,0,0,0})
    sleep(0)
    moveJoint(inverseKinematics(homeB_q, homeB_p), 1.1519173063162573, 0.8726646259971648, 0, 0)

    setPlanContext(sched.current_thread_id(), 17, "等待: 1")
    sleep(1)

    setPlanContext(sched.current_thread_id(), 18, "abc-func.lua")
    --分割字符串函数输出列表
    function string.split(str,delimiter)
    	if str  ==  nil or str ==  ''  or  delimiter  == nil then
       return  nil
    	end
    	local  result =  {}
    	for match in  (str..delimiter):gmatch("(.-)"..delimiter) do
       table.insert(result,match)
    	end
    	return result
    end
    
    --自定义函数区
    pi = 3.1416
    --弧度转换函数单个
    function toRad(degs)
        if degs==nil or degs=="" then
            return nil
        end
        return degs*(pi/180) 
    end
    -- 弧度转角度单个
    function toDeg(rads)
        if rads==nil or rads =="" then
            return nil
        end
        return rads*(180/pi)
    end
    
    -- 将角度列表转换为弧度列表
    function degToRadList(degrees)
        local radians = {}
        for i,j in ipairs(degrees) do
            radians[i] =j*(pi/180)
        end
        return radians
    end
    
    -- 将弧度列表转换为角度列表
    function radToDegList(radians)
        local degrees = {}
        for a,b in ipairs(radians) do
            degrees[a] =b*(180/pi)
        end
        return degrees
    end
    ---------------------------------------
    
    
    
    -- 定义一个全局变量作为计数器，模拟种子变化---OKOK
    local counter = math.random(1, 1000000)
    
    -- 定义一个函数来生成随机客户端名称
    function generateRandomClientName(length)
        -- 定义字符集，包括大小写字母和数字
        local charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
        local client_name = ""
    
        -- 循环生成随机字符直到达到指定长度
        for i = 1, length do
            -- 使用计数器模拟种子变化
            local random_value = ((counter % #charset) + 1)
            client_name = client_name .. charset:sub(random_value, random_value)
            counter = (counter + 1) % 1000000 -- 更新计数器
        end
        return client_name
    end
    

    setPlanContext(sched.current_thread_id(), 19, "pzdGG")
    setTcpOffset({0,0,0,0,0,0})
    sleep(0)
    moveJoint(inverseKinematics(pzdGG_q, pzdGG_p), 1.1519173063162573, 0.8726646259971648, 0, 0)

    setPlanContext(sched.current_thread_id(), 20, "等待: 1")
    sleep(1)

    setPlanContext(sched.current_thread_id(), 21, "abc_pz_get.lua")
    ip = "192.168.192.111" --服务端IP地址
    port = 55000 --串口号
    local client_name = generateRandomClientName(10) -- 这里指定生成10个字符长度的名称
    print("Generated Client Name:", client_name)
    
    rec_key = "camera_send" --接收服务端发送的字符串
    socketOpen(ip, port, client_name) ----与服务端建立通信
    
    point_all=0
    
        -- 触发拍照数据
        -- 201,1,固定，之后是关节角，位姿
        -- msg_send_G01="201,1,-92.32,7.82,-43.3,38.73,-90,-27.95,-103.18,455.55,668.42,179.86,0.057,-154.36"
    ----------------------------------------------------------
    ----------------------------------------------------------
    
    
        -- 当前点位--TCP的位姿,形式为(x,y,z,rx,ry,rz)
        currentPosLine=getTcpPose()
        -- currentPosLine=getTcpTargetPose()
    
        -- 将角度从弧度转换为角度
        currentPosSend = {
            currentPosLine[1] * 1000,
            currentPosLine[2] * 1000,
            currentPosLine[3] * 1000,
            toDeg(currentPosLine[4]),
            toDeg(currentPosLine[5]),
            toDeg(currentPosLine[6])
        }
        -- 当前关机角--rad
        currentJointRad = getJointPositions()-- return rad
        currentJointDeg=radToDegList(currentJointRad)
    
        -- currentPosSend={currentPosLine[1]*1000,currentPosLine[2]*1000,currentPosLine[3]*1000,toDeg(currentPosLine[4]),toDeg(currentPosLine[5]),toDeg(currentPosLine[6])}
    -- 构建 msg_send_G01 字符串
    -- 构建 msg_send_G01 字符串
    msg_send_G01 = string.format("201,1,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,,%.2f,%.2f",
        currentJointDeg[1], currentJointDeg[2], currentJointDeg[3],
        currentJointDeg[4], currentJointDeg[5], currentJointDeg[6],
        currentPosSend[1], currentPosSend[2], currentPosSend[3],
        currentPosSend[4], currentPosSend[5], currentPosSend[6])
    
        -- 打印结果
    print(msg_send_G01)
    textmsg(msg_send_G01)
    ----------------------------------------------------------
    ----------------------------------------------------------
    
        
        socketSendLine(msg_send_G01, client_name) --发送给服务端字符串
        sleep(2)
        msg_send_G02="203,19,1"
        socketSendLine(msg_send_G02, client_name) --发送给服务端字符串
        sleep(3)
        --接收数据
        msg_send_G03="205,1"
        socketSendLine(msg_send_G03, client_name) --发送给服务端字符串
        sleep(3)
        rec_str = ""
        -- ------------------------------------------------
        --接收服务端发送的字符串后停止循环
        while(rec_str == nil or rec_str == "") 
        do
          socketReadString(rec_key, client_name, "", "", true) 
          rec_str = getString(rec_key, "")
        end
        point_all=string.split(rec_str,",")
        -- point_get=rec_str
        -- textmsg("up point")
        textmsg(point_all[7])
        textmsg(point_all[12])
        -- textmsg("get point")
        textmsg(point_all[15])
        -- textmsg(point_all[20])
        --textmsg(point_get)
        -- --------------------------------------------------
        --设置相对移动
        --setTcpOffset({0,0,0.02,0,0,0})
        point_getUp_Rad={toRad(point_all[8]),toRad(point_all[9]),toRad(point_all[10]),toRad(point_all[11]),toRad(point_all[12]),toRad(point_all[13])}
        point_get_Rad={toRad(point_all[16]),toRad(point_all[17]),toRad(point_all[18]),toRad(point_all[19]),toRad(point_all[20]),toRad(point_all[21])}
        sleep(0.1)
        textmsg("point_getUp_Rad result")
        textmsg(table.concat(point_getUp_Rad,","))
        textmsg(table.concat(radToDegList(point_getUp_Rad),"."))
        textmsg("point_get_Rad result")
        textmsg(table.concat(point_get_Rad,","))
        textmsg(table.concat(radToDegList(point_get_Rad),"."))
        ---------------------------主控部分--------------------------------
        --机械臂移动控制区
        moveJoint(point_getUp_Rad, 1.0, 1.0, 0, 0)
        moveJoint(point_get_Rad, 1.0, 1.0, 0, 0)
        sleep(2)
        --抓取
            modbusSetOutputSignal('control', 1035)
            sleep(2)
        moveJoint(point_getUp_Rad, 1.0, 1.0, 0, 0)
        socketClose(client_name)

    setPlanContext(sched.current_thread_id(), 22, "关节运动")
    setPlanContext(sched.current_thread_id(), 23, "homeB")
    moveJoint(inverseKinematics(homeB_q, homeB_p), 0.8726646259971648, 0.6981317007977318, 0, 0)

    setPlanContext(sched.current_thread_id(), 24, "agvUP")
    moveJoint(inverseKinematics(agvUP_q, agvUP_p), 0.8726646259971648, 0.6981317007977318, 0, 0)

    setPlanContext(sched.current_thread_id(), 25, "putAGV")
    moveJoint(inverseKinematics(putAGV_q, putAGV_p), 0.8726646259971648, 0.6981317007977318, 0, 0)

    setPlanContext(sched.current_thread_id(), 26, "等待: 1.5")
    sleep(1.5)

    setPlanContext(sched.current_thread_id(), 27, "Set control=811")
    modbusSetOutputSignal('control', 811)

    setPlanContext(sched.current_thread_id(), 28, "等待: 1.5")
    sleep(1.5)

    setPlanContext(sched.current_thread_id(), 29, "agvUP")
    moveJoint(inverseKinematics(agvUP_q, agvUP_p), 0.8726646259971648, 0.6981317007977318, 0, 0)

    setPlanContext(sched.current_thread_id(), 30, "homeB")
    moveJoint(inverseKinematics(homeB_q, homeB_p), 0.8726646259971648, 0.6981317007977318, 0, 0)

    setPlanContext(sched.current_thread_id(), 31, "等待: 5")
    sleep(5)

    setPlanContext(sched.current_thread_id(), 32, "AGVgo1.lua")
        modbusSetOutputSignal('agvGo', 1)
    
        sleep(2)
    
        sched.sync_program_point()
        while not (modbusGetSignalStatus('agvOver') == 4) do
            sync()
        end
    
        sleep(2)

    setPlanContext(sched.current_thread_id(), 33, "等待: 2")
    sleep(2)

    setPlanContext(sched.current_thread_id(), 34, "关节运动")
    setPlanContext(sched.current_thread_id(), 35, "goUP")
    moveJoint(inverseKinematics(goUP_q, goUP_p), 1.3962634015954636, 1.0471975511965976, 0, 0)

    setPlanContext(sched.current_thread_id(), 36, "等待: 1")
    sleep(1)

    setPlanContext(sched.current_thread_id(), 37, "get22")
    moveJoint(inverseKinematics(get22_q, get22_p), 1.3962634015954636, 1.0471975511965976, 0, 0)

    setPlanContext(sched.current_thread_id(), 38, "等待: 1")
    sleep(1)

    setPlanContext(sched.current_thread_id(), 39, "Set control=1035")
    modbusSetOutputSignal('control', 1035)

    setPlanContext(sched.current_thread_id(), 40, "等待: 1.5")
    sleep(1.5)

    setPlanContext(sched.current_thread_id(), 41, "goUP")
    moveJoint(inverseKinematics(goUP_q, goUP_p), 1.3962634015954636, 1.0471975511965976, 0, 0)

    setPlanContext(sched.current_thread_id(), 42, "pzdFF")
    setTcpOffset({0,0,0,0,0,0})
    sleep(0)
    moveJoint(inverseKinematics(pzdFF_q, pzdFF_p), 1.1519173063162573, 0.8726646259971648, 0, 0)

    setPlanContext(sched.current_thread_id(), 43, "等待: 1")
    sleep(1)

    setPlanContext(sched.current_thread_id(), 44, "abc_pz_put.lua")
    ip = "192.168.192.111" --服务端IP地址
    port = 55000 --串口号
    
    local client_name = generateRandomClientName(10) -- 这里指定生成10个字符长度的名称
    print("Generated Client Name:", client_name)
    rec_key = "camera_sendQQ" --接收服务端发送的字符串
    socketOpen(ip, port, client_name) ----与服务端建立通信
    
    point_all=0
        -- 触发拍照数据
        -- 201,1,固定，之后是关节角，位姿
        -- msg_send_G01="201,1,-92.32,7.82,-43.3,38.73,-90,-27.95,-103.18,455.55,668.42,179.86,0.057,-154.36"
    ----------------------------------------------------------
    ----------------------------------------------------------
        -- 当前点位--TCP的位姿,形式为(x,y,z,rx,ry,rz)
        currentPosLine=getTcpPose()
        -- currentPosLine=getTcpTargetPose()
    
        -- 将角度从弧度转换为角度
        currentPosSend = {
            currentPosLine[1] * 1000,
            currentPosLine[2] * 1000,
            currentPosLine[3] * 1000,
            toDeg(currentPosLine[4]),
            toDeg(currentPosLine[5]),
            toDeg(currentPosLine[6])
        }
        -- 当前关机角--rad
        currentJointRad = getJointPositions()-- return rad
        currentJointDeg=radToDegList(currentJointRad)
    
        -- currentPosSend={currentPosLine[1]*1000,currentPosLine[2]*1000,currentPosLine[3]*1000,toDeg(currentPosLine[4]),toDeg(currentPosLine[5]),toDeg(currentPosLine[6])}
    -- 构建 msg_send_G01 字符串
    -- 构建 msg_send_G01 字符串
    msg_send_G01 = string.format("201,1,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,,%.2f,%.2f",
        currentJointDeg[1], currentJointDeg[2], currentJointDeg[3],
        currentJointDeg[4], currentJointDeg[5], currentJointDeg[6],
        currentPosSend[1], currentPosSend[2], currentPosSend[3],
        currentPosSend[4], currentPosSend[5], currentPosSend[6])
    
        -- 打印结果
    -- print(msg_send_G01)
    textmsg(msg_send_G01)
    ----------------------------------------------------------
    ----------------------------------------------------------
    
        
        socketSendLine(msg_send_G01, client_name) --发送给服务端字符串
        sleep(2)
        msg_send_G02="203,19,2"
        socketSendLine(msg_send_G02, client_name) --发送给服务端字符串
        sleep(3)
        --接收数据
        msg_send_G03="205,1"
        socketSendLine(msg_send_G03, client_name) --发送给服务端字符串
        sleep(3)
        rec_str = ""
        -- ------------------------------------------------
        --接收服务端发送的字符串后停止循环
        while(rec_str == nil or rec_str == "") 
        do
          socketReadString(rec_key, client_name, "", "", true) 
          rec_str = getString(rec_key, "")
        end
        point_all=string.split(rec_str,",")
        -- point_get=rec_str
        -- textmsg("up point")
        textmsg(point_all[7])
        textmsg(point_all[12])
        -- textmsg("get point")
        textmsg(point_all[15])
        -- textmsg(point_all[20])
        --textmsg(point_get)
        -- --------------------------------------------------
        --设置相对移动
        --setTcpOffset({0,0,0.02,0,0,0})
        point_getUp_Rad={toRad(point_all[8]),toRad(point_all[9]),toRad(point_all[10]),toRad(point_all[11]),toRad(point_all[12]),toRad(point_all[13])}
        point_get_Rad={toRad(point_all[16]),toRad(point_all[17]),toRad(point_all[18]),toRad(point_all[19]),toRad(point_all[20]),toRad(point_all[21])}
        sleep(0.1)
        textmsg("point_getUp_Rad result")
        textmsg(table.concat(point_getUp_Rad,","))
        textmsg(table.concat(radToDegList(point_getUp_Rad),"."))
        textmsg("point_get_Rad result")
        textmsg(table.concat(point_get_Rad,","))
        textmsg(table.concat(radToDegList(point_get_Rad),"."))
    
    
        socketClose(client_name)
    
    
        ---------------------------主控部分--------------------------------
    gddDegput={-104.67,-5.44,-112.71,-102.37,-76.57,-21.48}
    gddRadput=degToRadList(gddDegput)
    
        moveJoint(gddRadput, 1.0, 1.0, 0, 0)
    
        --机械臂移动控制区
        moveJoint(point_getUp_Rad, 1.0, 1.0, 0, 0)
        sleep(2)
    
        moveJoint(point_get_Rad, 1.0, 1.0, 0, 0)
        sleep(1)
        --put--put
            modbusSetOutputSignal('control', 299)
            sleep(0.25)
        moveJoint(point_getUp_Rad, 1.0, 1.0, 0, 0)
        moveJoint(gddRadput, 1.0, 1.0, 0, 0)
    
    

    setPlanContext(sched.current_thread_id(), 45, "backAA")
    setTcpOffset({0,0,0,0,0,0})
    sleep(0)
    moveJoint(inverseKinematics(backAA_q, backAA_p), 1.1519173063162573, 0.8726646259971648, 0, 0)

    setPlanContext(sched.current_thread_id(), 46, "homeB")
    setTcpOffset({0,0,0,0,0,0})
    sleep(0)
    moveJoint(inverseKinematics(homeB_q, homeB_p), 1.1519173063162573, 0.8726646259971648, 0, 0)

    setPlanContext(sched.current_thread_id(), 47, "等待: 1")
    sleep(1)

    setPlanContext(sched.current_thread_id(), 48, "Set finish=1")
    modbusSetOutputSignal('finish', 1)

    setPlanContext(sched.current_thread_id(), 49, "等待: 1")
    sleep(1)

    sched.sync_program_point()
    if (currentPointA==1.02256) then
        setPlanContext(sched.current_thread_id(), 50, "如果 currentPointA==1.02256")
        setPlanContext(sched.current_thread_id(), 51, "关节运动")
        setPlanContext(sched.current_thread_id(), 52, "UUUPPP")
        moveJoint(inverseKinematics(UUUPPP_q, UUUPPP_p), 1.3962634015954636, 1.0471975511965976, 0, 0)

        setPlanContext(sched.current_thread_id(), 53, "路点_3")
        moveJoint(inverseKinematics(u8defu70b9_3_q, u8defu70b9_3_p), 1.3962634015954636, 1.0471975511965976, 0, 0)

        setPlanContext(sched.current_thread_id(), 54, "关节运动")
        setPlanContext(sched.current_thread_id(), 55, "gggdddqqqq")
        moveJoint(inverseKinematics(gggdddqqqq_q, gggdddqqqq_p), 1.3962634015954636, 1.0471975511965976, 0, 0)

        setPlanContext(sched.current_thread_id(), 56, "BBqqUUP")
        moveJoint(inverseKinematics(BBqqUUP_q, BBqqUUP_p), 1.3962634015954636, 1.0471975511965976, 0, 0)

        setPlanContext(sched.current_thread_id(), 57, "BBuupput")
        moveJoint(inverseKinematics(BBuupput_q, BBuupput_p), 1.3962634015954636, 1.0471975511965976, 0, 0)

        setPlanContext(sched.current_thread_id(), 58, "关节运动")
        setPlanContext(sched.current_thread_id(), 59, "homeB")
        setTcpOffset({0,0,0,0,0,0})
        sleep(0)
        moveJoint(inverseKinematics(homeB_q, homeB_p), 1.1519173063162573, 0.8726646259971648, 0, 0)

        setPlanContext(sched.current_thread_id(), 60, "ARCS_function.lua")
        --分割字符串函数输出列表
        function string.split(str,delimiter)
        	if str  ==  nil or str ==  ''  or  delimiter  == nil then
           return  nil
        	end
        	local  result =  {}
        	for match in  (str..delimiter):gmatch("(.-)"..delimiter) do
           table.insert(result,match)
        	end
        	return result
        end
        
        --自定义函数区
        pi = 3.1416
        --弧度转换函数单个
        function toRad(degs)
            if degs==nil or degs=="" then
                return nil
            end
            return degs*(pi/180) 
        end
        -- 弧度转角度单个
        function toDeg(rads)
            if rads==nil or rads =="" then
                return nil
            end
            return rads*(180/pi)
        end
        
        -- 将角度列表转换为弧度列表
        function degToRadList(degrees)
            local radians = {}
            for i,j in ipairs(degrees) do
                radians[i] =j*(pi/180)
            end
            return radians
        end
        
        -- 将弧度列表转换为角度列表
        function radToDegList(radians)
            local degrees = {}
            for a,b in ipairs(radians) do
                degrees[a] =b*(180/pi)
            end
            return degrees
        end
        ---------------------------------------
        
        
        
        -- -- Get Current Point  
        -- currentPosLine=getTcpPose()
        -- -- currentPosSend={currentPosLine[1]*1000,currentPosLine[2]*1000,currentPosLine[3]*1000,toDeg(currentPosLine[4]),toDeg(currentPosLine[5]),toDeg(currentPosLine[6])}
        
        
        

        setPlanContext(sched.current_thread_id(), 61, "等待: 1")
        sleep(1)

        setPlanContext(sched.current_thread_id(), 62, "pzdFF")
        setTcpOffset({0,0,0,0,0,0})
        sleep(0)
        moveJoint(inverseKinematics(pzdFF_q, pzdFF_p), 1.1519173063162573, 0.8726646259971648, 0, 0)

        setPlanContext(sched.current_thread_id(), 63, "等待: 1")
        sleep(1)

        setPlanContext(sched.current_thread_id(), 64, "关节运动")
        setPlanContext(sched.current_thread_id(), 65, "goUP")
        moveJoint(inverseKinematics(goUP_q, goUP_p), 1.3962634015954636, 1.0471975511965976, 0, 0)

        setPlanContext(sched.current_thread_id(), 66, "get22")
        moveJoint(inverseKinematics(get22_q, get22_p), 1.3962634015954636, 1.0471975511965976, 0, 0)

        setPlanContext(sched.current_thread_id(), 67, "等待: 1")
        sleep(1)

        setPlanContext(sched.current_thread_id(), 68, "Set control=1035")
        modbusSetOutputSignal('control', 1035)

        setPlanContext(sched.current_thread_id(), 69, "等待: 1.5")
        sleep(1.5)

        setPlanContext(sched.current_thread_id(), 70, "goUP")
        moveJoint(inverseKinematics(goUP_q, goUP_p), 1.3962634015954636, 1.0471975511965976, 0, 0)

        setPlanContext(sched.current_thread_id(), 71, "homeB")
        moveJoint(inverseKinematics(homeB_q, homeB_p), 1.3962634015954636, 1.0471975511965976, 0, 0)

        setPlanContext(sched.current_thread_id(), 72, "等待: 1.5")
        sleep(1.5)

        setPlanContext(sched.current_thread_id(), 73, "关节运动")
        setPlanContext(sched.current_thread_id(), 74, "路点_0")
        moveJoint(inverseKinematics(u8defu70b9_0_q, u8defu70b9_0_p), 0.8726646259971648, 0.6981317007977318, 0, 0)

        setPlanContext(sched.current_thread_id(), 75, "等待: 1")
        sleep(1)

        setPlanContext(sched.current_thread_id(), 76, "homeB")
        moveJoint(inverseKinematics(homeB_q, homeB_p), 0.8726646259971648, 0.6981317007977318, 0, 0)

        setPlanContext(sched.current_thread_id(), 77, "等待: 1")
        sleep(1)

        setPlanContext(sched.current_thread_id(), 78, "agvUP")
        moveJoint(inverseKinematics(agvUP_q, agvUP_p), 0.8726646259971648, 0.6981317007977318, 0, 0)

        setPlanContext(sched.current_thread_id(), 79, "putAGV")
        moveJoint(inverseKinematics(putAGV_q, putAGV_p), 0.8726646259971648, 0.6981317007977318, 0, 0)

        setPlanContext(sched.current_thread_id(), 80, "Set control=811")
        modbusSetOutputSignal('control', 811)

        setPlanContext(sched.current_thread_id(), 81, "等待: 1.5")
        sleep(1.5)

        setPlanContext(sched.current_thread_id(), 82, "agvUP")
        moveJoint(inverseKinematics(agvUP_q, agvUP_p), 0.8726646259971648, 0.6981317007977318, 0, 0)

        setPlanContext(sched.current_thread_id(), 83, "homeB")
        moveJoint(inverseKinematics(homeB_q, homeB_p), 0.8726646259971648, 0.6981317007977318, 0, 0)

        setPlanContext(sched.current_thread_id(), 84, "等待: 5")
        sleep(5)
    end
end


function app:start(api)
  --
  self.api = api
  print("start---")
  p_AUBO226()
end

function app:robot_error_handler(name, err)
  --
  print("An error hanppen to robot "..name)
end

-- return our app object
return app

