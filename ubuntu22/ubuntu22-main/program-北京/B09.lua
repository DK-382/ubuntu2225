--- Auto generated by 'aubo_scope' v0.31.0-alpha.58 2024-08-14 11:42:15
--- DO NOT MODIFY IT!
local app = {}
local aubo = require('aubo')
local sched = sched or aubo.sched
local math = aubo.math or math
local realtime = aubo.realtime or realtime

local sleep = sched.sleep
local thread = sched.thread
local sync = sched.sync
local run = sched.run
local kill = sched.kill
local halt = sched.halt

app.PRIORITY = 1000 -- set the app priority, which determines app execution order
app.VERSION = "0.1"
app.VENDOR = "Aubo Robotics"

function p_B09()
    local _ENV = sched.select_robot(1)
    setCollisionStopType(1)
    setCollisionLevel(1)
    setHardwareCustomParameters("[over_force_config] \n    is_enable =true")
    setHardwareCustomParameters("handle_enable=false")
    setFreedriveDamp({0.5,0.5,0.5,0.5,0.5,0.5})
    gripper_service = sched.jsonrpc.proxy('http://127.0.0.1:8890/jsonrpc')
    setHomePosition({0,-0.2617993877991494,1.74532925199433,0.4363323129985824,1.570796326794897,0}    )
    modbusDeleteAllSignals()
    setDigitalInputActionDefault()
    setDigitalOutputRunstateDefault()
    modbusAddSignal("/dev/ttyUSB0,115200,N,8,1", 9, 1000, 3, "control", false)
    modbusAddSignal("192.168.192.5,502", 1, 0, 3, "agvGo", true)
    modbusAddSignal("192.168.192.5,502", 1, 18, 0, "agvOK", true)
    modbusAddSignal("192.168.192.5,502", 1, 8, 2, "agvOver", true)
    setPayload(0, {0,0,0}, {0,0,0}, {0,0,0,0,0,0,0,0,0})
    local agv =sched.jsonrpc.proxy('http://127.0.0.1:8989/jsonrpc')
    setTcpOffset({0,0,0,0,0,0})
    setToolVoltageOutputDomain(0)
    setToolIoInput(0, true)
    setToolIoInput(1, true)
    setToolIoInput(2, true)
    setToolIoInput(3, true)
    u5e73u9762_0= {}
    setLabel(1, "初始变量")
    u57fau5ea7 = {0,0,0,0,0,0}
    u5de5u5177 = {0,0,0,0,0,0}
    home_p = {-0.6450191418387743,-0.06218232585696717,0.5316956345659992,3.141540736339179,7.544171546575244e-05,-1.229087809977}    
    home_q = {-0.1700950996707674,0.1816378685621145,-1.113350578320226,0.2757256675816654,-1.57083667510331,-0.511803620105592}    
    up_p = {-0.5958792545542568,0.07860655194206609,0.3318276373498187,3.122653804331059,0.02936327508421547,-2.692886576510639}    
    up_q = {-0.1952503753236343,0.1857283564238758,-1.648377817759842,-0.2511975640946546,-1.603570157310291,0.9267602959360913}    
    agvGet_p = {-0.5957597698940166,0.07859238700076793,0.2100992297404886,3.123949197645594,0.03108203613306621,-2.692870120793924}    
    agvGet_q = {-0.1952656840356918,0.3099738634824617,-1.843242413539628,-0.5681555348462748,-1.603566489282253,0.9267676319921664}    
    
    setLabel(2, "机器人编程")
    setLabel(3, "等待：1.00s")
    sleep(1)
    
    setLabel(4, "关节运动")
    setLabel(5, "设置 agvGo=1")
    modbusSetOutputSignal('agvGo', 1)
    
    setLabel(6, "等待：2.00s")
    sleep(2)
    
    setLabel(7, "等待：agvOver == 4")
    sched.sync_program_point()
    local time = realtime.time() + 100
    while not (modbusGetSignalStatus('agvOver') == 4) do
        if (realtime.time() >= time) then
            break
        end
        sync()
    end
    
    setLabel(8, "等待：1.00s")
    sleep(1)
    
    setLabel(9, "home")
    moveJoint(inverseKinematics(home_q, home_p), 0.872665, 0.523599, 0, 0)
    
    setLabel(10, "up")
    moveJoint(inverseKinematics(up_q, up_p), 0.872665, 0.523599, 0, 0)
    
    setLabel(11, "直线运动")
    setLabel(12, "agvGet")
    moveLine(agvGet_p, 0.8, 0.18, 0, 0)
    
    setLabel(13, "等待：0.05s")
    sleep(0.05)
    
    setLabel(14, "设置 control=555")
    modbusSetOutputSignal('control', 555)
    
    setLabel(15, "等待：2.00s")
    sleep(2)
    
    setLabel(16, "up")
    moveLine(up_p, 0.8, 0.18, 0, 0)
    
    setLabel(17, "关节运动")
    setLabel(18, "home")
    moveJoint(inverseKinematics(home_q, home_p), 1.0472, 0.523599, 0, 0)
    
    setLabel(19, "等待：2.00s")
    sleep(2)
    
    setLabel(20, "设置 agvGo=4")
    modbusSetOutputSignal('agvGo', 4)
    
    setLabel(21, "等待：2.00s")
    sleep(2)
    
    setLabel(22, "关节运动")
    setLabel(23, "等待：agvOver == 4")
    sched.sync_program_point()
    local time = realtime.time() + 100
    while not (modbusGetSignalStatus('agvOver') == 4) do
        if (realtime.time() >= time) then
            break
        end
        sync()
    end
    
    setLabel(24, "等待：1.00s")
    sleep(1)
    
    setLabel(25, "home")
    moveJoint(inverseKinematics(home_q, home_p), 0.872665, 0.523599, 0, 0)
    
    setLabel(26, "up")
    moveJoint(inverseKinematics(up_q, up_p), 0.872665, 0.523599, 0, 0)
    
    setLabel(27, "直线运动")
    setLabel(28, "agvGet")
    moveLine(agvGet_p, 0.8, 0.18, 0, 0)
    
    setLabel(29, "等待：0.05s")
    sleep(0.05)
    
    setLabel(30, "设置 control=299")
    modbusSetOutputSignal('control', 299)
    
    setLabel(31, "等待：2.00s")
    sleep(2)
    
    setLabel(32, "up")
    moveLine(up_p, 0.8, 0.18, 0, 0)
    
    setLabel(33, "关节运动")
    setLabel(34, "home")
    moveJoint(inverseKinematics(home_q, home_p), 1.0472, 0.523599, 0, 0)
end

function app:start(api)
  --
  self.api = api
  print("start---")
  p_B09()
end

function app:robot_error_handler(name, err)
  --
  print("An error hanppen to robot "..name)
end

-- return our app object
return app


