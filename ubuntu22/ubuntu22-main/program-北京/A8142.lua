--- Auto generated by 'aubo_scope' v0.31.0-alpha.58 2024-08-14 17:01:40
--- DO NOT MODIFY IT!
local app = {}
local aubo = require('aubo')
local sched = sched or aubo.sched
local math = aubo.math or math
local realtime = aubo.realtime or realtime

local sleep = sched.sleep
local thread = sched.thread
local sync = sched.sync
local run = sched.run
local kill = sched.kill
local halt = sched.halt

app.PRIORITY = 1000 -- set the app priority, which determines app execution order
app.VERSION = "0.1"
app.VENDOR = "Aubo Robotics"

function p_A8142()
    local _ENV = sched.select_robot(1)
    setCollisionStopType(1)
    setCollisionLevel(1)
    setHardwareCustomParameters("[over_force_config] \n    is_enable =true")
    setHardwareCustomParameters("handle_enable=false")
    setFreedriveDamp({0.5,0.5,0.5,0.5,0.5,0.5})
    gripper_service = sched.jsonrpc.proxy('http://127.0.0.1:8890/jsonrpc')
    setHomePosition({0,-0.2617993877991494,1.74532925199433,0.4363323129985824,1.570796326794897,0}    )
    modbusDeleteAllSignals()
    setDigitalInputActionDefault()
    setDigitalOutputRunstateDefault()
    modbusAddSignal("/dev/ttyUSB0,115200,N,8,1", 9, 1000, 3, "control", false)
    modbusAddSignal("192.168.192.5,502", 1, 0, 3, "agvGo", true)
    modbusAddSignal("192.168.192.5,502", 1, 18, 0, "agvOK", true)
    modbusAddSignal("192.168.192.5,502", 1, 8, 2, "agvOver", true)
    setPayload(0, {0,0,0}, {0,0,0}, {0,0,0,0,0,0,0,0,0})
    local agv =sched.jsonrpc.proxy('http://127.0.0.1:8989/jsonrpc')
    setTcpOffset({0,0,0,0,0,0})
    setToolVoltageOutputDomain(0)
    setToolIoInput(0, true)
    setToolIoInput(1, true)
    setToolIoInput(2, true)
    setToolIoInput(3, true)
    u5e73u9762_0= {}
    tableUp = 0
    tableGet = 0
    point_get = 0
    point_up = 0
    gdddd_p = 0
    setLabel(1, "初始变量")
    u57fau5ea7 = {0,0,0,0,0,0}
    u5de5u5177 = {0,0,0,0,0,0}
    homeA_p = {-0.4544123117949642,-0.06242110509652263,0.4900353489150864,3.138013982338131,0.001831212770194146,-1.229411444343532}    
    homeA_q = {-0.1315783801341234,-0.07986248906151193,-1.504062589193888,0.1425762498190679,-1.570796326794897,-0.4729665392441489}    
    putUP2_p = {-0.09406164782062143,0.5149084672457879,0.3179427407087708,1.556154281023032,0.4241250345249942,3.122182719501091}    
    putUP2_q = {-1.633479379185494,0.4174287751563929,-1.996494868204745,-2.427284541587852,-1.521501697998435,-0.4235068491859985}    
    PUT22_p = {-0.09405717358581661,0.5149632598665251,0.2202961926323803,1.556596241049699,0.4241110803791184,3.12235354228847}    
    PUT22_q = {-1.633479379185494,0.6357279473537837,-2.026986760880853,-2.675672396205753,-1.521512702082548,-0.4235141852420735}    
    pzd4_p = {-0.07888439999566645,0.5250757253967675,0.6029207922775044,2.97319780134579,0.1168737101306469,-2.713720538501295}    
    pzd4_q = {-1.649042215863138,0.1279655240885559,-1.039559524460714,0.1995077129896815,-1.59009382230038,-0.5179659072086543}    
    gdddd_p = {-0.09156756597549007,0.5546094880319538,0.5111636565875596,2.123370195132839,0.3412762355732998,-2.943977860105963}    
    gdddd_q = {-1.63349162615514,0.1083397552308542,-1.62002302128696,-1.210284191125561,-1.521454013633947,-0.4234151484850601}    
    
    setLabel(2, "机器人编程")
    setLabel(3, "tableUp:=0")
    sched.INST([[ tableUp = 0 ]], _ENV)
    
    setLabel(4, "tableGet:=0")
    sched.INST([[ tableGet = 0 ]], _ENV)
    
    setLabel(5, "point_get:=0")
    sched.INST([[ point_get = 0 ]], _ENV)
    
    setLabel(6, "point_up:=0")
    sched.INST([[ point_up = 0 ]], _ENV)
    
    setLabel(7, "gdddd_p:=0")
    sched.INST([[ gdddd_p = 0 ]], _ENV)
    
    setLabel(8, "关节运动")
    setLabel(9, "pzd4")
    setTcpOffset({0,0,0,0,0,0})
    moveJoint(inverseKinematics(pzd4_q, pzd4_p), 1.39626, 1.0472, 0, 0)
    
    setLabel(10, "paizhao41.lua")
    --subscript context start
    --分割字符串函数--输出列表table
    function string.split(str,delimiter)
    	if str  ==  nil or str ==  ''  or  delimiter  == nil then
       return  nil
    	end
    	local  result =  {}
    	for match in  (str..delimiter):gmatch("(.-)"..delimiter) do
       table.insert(result,match)
    	end
    	return result
    end
    --弧度转换函数
    pi = 3.1416
    function toRad(deg)
    return deg*pi/180 
    end
    ------------------------------------------------------------------
    ip = "192.168.192.111" --服务端IP地址
    port = 55000 --串口号
    client_name = "socnhkn1" --客户端名称
    rec_key = "camera_send2" --接收服务端发送的字符串
    socketOpen(ip, port, client_name) ----与服务端建立通信
    sleep(2)
    -- 发送拍照数据
    msg_send_10="201,1,-94.48,7.33,-59.56,11.43,-91.11,-29.68,-78.88,525.08,602.92,170.34,6.7,-155.5"
    socketSendLine(msg_send_10, client_name) --发送给服务端字符串
    sleep(2)
    msg_send_11="203,10,2"
    socketSendLine(msg_send_11, client_name) --发送给服务端字符串
    sleep(2)
    msg_send_12="205,1"
    socketSendLine(msg_send_12, client_name) --发送给服务端字符串
    sleep(2)
    rec_str = ""
    -- ------------------------------------------------
    --接收服务端发送的字符串后停止循环
    while(rec_str == nil or rec_str == "") 
    do
      socketReadString(rec_key, client_name, "", "", true) 
      --sleep(0.01)
      rec_str = getString(rec_key, "")
      --textmsg(rec_str)
      --sleep(0.001)
    end
    point_up=string.split(rec_str,",")
    point_get=rec_str
    textmsg("up point")
    textmsg(point_up[7])
    textmsg(point_up[12])
    textmsg("get point")
    textmsg(point_up[15])
    textmsg(point_up[20])
     
    textmsg(point_get)
    -- --------------------------------------------------
    tableUp={toRad(point_up[7]),toRad(point_up[8]),toRad(point_up[9]),toRad(point_up[10]),toRad(point_up[11]),toRad(point_up[12])}
    tableGet={toRad(point_up[15]),toRad(point_up[16]),toRad(point_up[17]),toRad(point_up[18]),toRad(point_up[19]),toRad(point_up[20])}
    --机械臂移动
    -- --------------------------------------------------
    tableGdd41={toRad(-93.59),toRad(6.21),toRad(-92.81),toRad(-69.33),toRad(-87.17),toRad(-24.26)}
    tableGdd42={toRad(-93.59),toRad(13.09),toRad(-107.41),toRad(-107.69),toRad(-87.17),toRad(-24.27)}
    tableGdd43={toRad(-93.59),toRad(23.09),toRad(-114.39),toRad(-139.07),toRad(-87.17),toRad(-24.26)}
    -- 过渡点固定
    moveJoint(tableGdd41, 1.0, 1.0, 0, 0)
    moveJoint(tableGdd42, 1.0, 1.0, 0, 0)
    sleep(1)
    moveJoint(tableGdd43, 1.0, 1.0, 0, 0)
    sleep(1)
    --UP点
    moveJoint(tableUp, 1.0, 1.0, 0, 0)
    --PUT点
    moveJoint(tableGet, 1.0, 1.0, 0, 0)
    sleep(2)
    --放置
        modbusSetOutputSignal('control', 299)
        sleep(2)
    moveJoint(tableUp, 1.0, 1.0, 0, 0)
    -- 过渡点固定
    moveJoint(tableGdd43, 1.0, 1.0, 0, 0)
    moveJoint(tableGdd41, 1.0, 1.0, 0, 0)
    -- --------------------------------------------------
    socketClose(client_name)
    --subscript context end
    
    sched.sync_program_point()
    if (agvPut == 123.0226) then
        setLabel(11, "如果 agvPut == 123.0226")
        setLabel(12, "关节运动")
        setLabel(13, "pzd4")
        setTcpOffset({0,0,0,0,0,0})
        moveJoint(inverseKinematics(pzd4_q, pzd4_p), 1.39626, 1.0472, 0, 0)
        
        setLabel(14, "gdddd")
        setTcpOffset({0,0,0,0,0,0})
        moveJoint(inverseKinematics(gdddd_q, gdddd_p), 1.39626, 1.0472, 0, 0)
        
        setLabel(15, "putUP2")
        setTcpOffset({0,0,0,0,0,0})
        moveJoint(inverseKinematics(putUP2_q, putUP2_p), 1.39626, 1.0472, 0, 0)
        
        setLabel(16, "PUT22")
        setTcpOffset({0,0,0,0,0,0})
        moveJoint(inverseKinematics(PUT22_q, PUT22_p), 1.39626, 1.0472, 0, 0)
        
        setLabel(17, "putUP2")
        setTcpOffset({0,0,0,0,0,0})
        moveJoint(inverseKinematics(putUP2_q, putUP2_p), 1.39626, 1.0472, 0, 0)
        
        setLabel(18, "homeA")
        setTcpOffset({0,0,0,0,0,0})
        moveJoint(inverseKinematics(homeA_q, homeA_p), 1.39626, 1.0472, 0, 0)
    end
end

function app:start(api)
  --
  self.api = api
  print("start---")
  p_A8142()
end

function app:robot_error_handler(name, err)
  --
  print("An error hanppen to robot "..name)
end

-- return our app object
return app


