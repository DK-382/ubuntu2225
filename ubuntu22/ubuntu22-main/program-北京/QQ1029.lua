--- Auto generated by 'aubo_scope' v0.31.0-alpha.58 2024-10-30 15:12:09
--- DO NOT MODIFY IT!
local app = {}
local aubo = require('aubo')
local sched = sched or aubo.sched
local math = aubo.math or math
local realtime = aubo.realtime or realtime

local sleep = sched.sleep
local thread = sched.thread
local sync = sched.sync
local run = sched.run
local kill = sched.kill
local halt = sched.halt

app.PRIORITY = 1000 -- set the app priority, which determines app execution order
app.VERSION = "0.1"
app.VENDOR = "Aubo Robotics"

function p_QQ1029()
    local _ENV = sched.select_robot(1)
    setCollisionStopType(1)
    setCollisionLevel(2)
    setHardwareCustomParameters("[over_force_config] \n    is_enable =true")
    setHardwareCustomParameters("handle_enable=false")
    setFreedriveDamp({0.5,0.5,0.5,0.5,0.5,0.5})
    gripper_service = sched.jsonrpc.proxy('http://127.0.0.1:8890/jsonrpc')
    setHomePosition({0,-0.2617993877991494,1.74532925199433,0.4363323129985824,1.570796326794897,0}    )
    modbusDeleteAllSignals()
    setDigitalInputActionDefault()
    setDigitalOutputRunstateDefault()
    modbusAddSignal("/dev/ttyUSB0,115200,N,8,1", 9, 1000, 3, "control", false)
    modbusAddSignal("192.168.192.5,502", 1, 0, 3, "agvGo", true)
    modbusAddSignal("192.168.192.5,502", 1, 18, 0, "agvOK", true)
    modbusAddSignal("192.168.192.5,502", 1, 8, 2, "agvOver", true)
    modbusAddSignal("192.168.192.5,502", 1, 110, 3, "start", true)
    modbusAddSignal("192.168.192.5,502", 1, 111, 3, "finish", true)
    setPayload(3, {0,0,0}, {0,0,0}, {0,0,0,0,0,0,0,0,0})
    local agv =sched.jsonrpc.proxy('http://127.0.0.1:8989/jsonrpc')
    setTcpOffset({0,0,0,0,0,0})
    setToolVoltageOutputDomain(0)
    setToolIoInput(0, true)
    setToolIoInput(1, true)
    setToolIoInput(2, true)
    setToolIoInput(3, true)
    u5e73u9762_0= {}
    tableUp = 0
    tableGet = 0
    point_get = 0
    point_up = 0
    gdddd = 0
    PUT22 = 0
    PutUpJointRad = 0
    GetDeg = 0
    GetUpDeg = 0
    currentPointA = 0
    currentJointDeg = {-98.957, 21.2067, -49.0196, 19.771, -89.9987, -30.1856}
    msg_AGV_G011 = 0
    setLabel(1, "初始变量")
    u57fau5ea7 = {0,0,0,0,0,0}
    u5de5u5177 = {0,0,0,0,0,0}
    homeB_p = {-0.4419816493442164,-0.02939541361270802,0.4153714821372347,-3.141575261292409,1.180186897213941e-06,-1.166830123880053}    
    homeB_q = {-0.2114408691956353,-0.1281247346939537,-1.744902309024726,-0.0459677273664152,-1.570807330879009,-0.6154070720258279}    
    pzdA_p = {-0.009485672829439701,0.4615940184948063,0.5982997236819501,3.141476454620299,6.706527819335114e-06,-2.726534118999417}    
    pzdA_q = {-1.816562390165835,0.00917298026484779,-1.115282537781881,0.4462449549906911,-1.570730302290221,-0.6608245951866126}    
    u8defu70b9_0_p = {-0.4444218383374269,0.1489216203841411,0.3427235281253589,2.595033723028563,0.2439135862433988,-1.208856825442054}    
    u8defu70b9_0_q = {-0.6555741616651132,-0.07584242127521515,-2.077272818247295,-0.926683267347303,-1.230476685472202,-0.9992258578456747}    
    u8defu70b9_1_p = {-0.4113770479654194,-0.1514184003543229,0.3429554511845085,2.595171082330687,0.2445199188623536,-1.206251298588273}    
    u8defu70b9_1_q = {0.08407544661973308,-0.1321325555106045,-2.150430091427626,-1.038781872202475,-1.625743386797203,-0.3660435219499419}    
    getDAup_p = {-0.561567123497571,-0.006458627806895023,0.1130794966766896,-3.137758598503598,-0.009838741733118911,-1.139888684901223}    
    getDAup_q = {-0.2075310241361525,0.4847381203307634,-1.906430653428122,-0.8114301583798493,-1.565180575869427,-0.6384826364099739}    
    getDA_p = {-0.5615850719442992,-0.00644899802641226,0.03306479219313709,-3.137921176470273,-0.009709119395490995,-1.139881544981492}    
    getDA_q = {-0.207540209363387,0.6504641135803232,-1.931953338170369,-1.002886549827137,-1.565187911925502,-0.6384973085221243}    
    u8defu70b9_2_p = {0.002708496365721122,0.6341129248910105,0.4304470203937569,-3.093884887206356,-0.04744755957582819,2.140503251794107}    
    u8defu70b9_2_q = {-1.778027300174722,0.3583800110082438,-1.1588786879792,0.05319007457232578,-1.503524692586466,0.7927378875005601}    
    u8defu70b9_3_p = {0.002657230133599729,0.6338992719516082,0.5406628651805847,-3.094607944694856,-0.04821876320626353,2.140518352636405}    
    u8defu70b9_3_q = {-1.778021176689899,0.4293022122281818,-0.7561523998828201,0.3839361627170479,-1.503499016390203,0.7927635636968229}    
    
    setLabel(2, "机器人编程")
    while true do
        setLabel(3, "关节运动")
        setLabel(4, "等待：2.00s")
        sleep(2)
        
        setLabel(5, "设置 start=0")
        modbusSetOutputSignal('start', 0)
        
        setLabel(6, "设置 finish=0")
        modbusSetOutputSignal('finish', 0)
        
        setLabel(7, "设置 start=1")
        modbusSetOutputSignal('start', 1)
        
        setLabel(8, "等待：2.00s")
        sleep(2)
        
        setLabel(9, "等待：1.00s")
        sleep(1)
        
        setLabel(10, "AGVgo1.lua")
        --subscript context start
            modbusSetOutputSignal('agvGo', 1)
        
            sleep(2)
        
            sched.sync_program_point()
            while not (modbusGetSignalStatus('agvOver') == 4) do
                sync()
            end
        
            sleep(2)
        --subscript context end
        
        setLabel(11, "homeB")
        setTcpOffset({0,0,0,0,0,0})
        moveJoint(inverseKinematics(homeB_q, homeB_p), 1.15192, 0.872665, 0, 0)
        
        setLabel(12, "ARCS_function.lua")
        --subscript context start
        --分割字符串函数输出列表
        function string.split(str,delimiter)
        	if str  ==  nil or str ==  ''  or  delimiter  == nil then
           return  nil
        	end
        	local  result =  {}
        	for match in  (str..delimiter):gmatch("(.-)"..delimiter) do
           table.insert(result,match)
        	end
        	return result
        end
        
        --自定义函数区
        pi = 3.1416
        --弧度转换函数单个
        function toRad(degs)
            if degs==nil or degs=="" then
                return nil
            end
            return degs*(pi/180) 
        end
        -- 弧度转角度单个
        function toDeg(rads)
            if rads==nil or rads =="" then
                return nil
            end
            return rads*(180/pi)
        end
        
        -- 将角度列表转换为弧度列表
        function degToRadList(degrees)
            local radians = {}
            for i,j in ipairs(degrees) do
                radians[i] =j*(pi/180)
            end
            return radians
        end
        
        -- 将弧度列表转换为角度列表
        function radToDegList(radians)
            local degrees = {}
            for a,b in ipairs(radians) do
                degrees[a] =b*(180/pi)
            end
            return degrees
        end
        ---------------------------------------
        
        
        
        -- -- Get Current Point  
        -- currentPosLine=getTcpPose()
        -- -- currentPosSend={currentPosLine[1]*1000,currentPosLine[2]*1000,currentPosLine[3]*1000,toDeg(currentPosLine[4]),toDeg(currentPosLine[5]),toDeg(currentPosLine[6])}
        
        
        --subscript context end
        
        setLabel(13, "等待：1.00s")
        sleep(1)
        
        setLabel(14, "pzdA")
        setTcpOffset({0,0,0,0,0,0})
        moveJoint(inverseKinematics(pzdA_q, pzdA_p), 1.15192, 0.872665, 0, 0)
        
        setLabel(15, "等待：1.00s")
        sleep(1)
        
        setLabel(16, "ARCS_3DPZ.lua")
        --subscript context start
         ip = "192.168.192.111" --服务端IP地址
            port = 55000 --串口号
            client_name = "sockbvcaqqffeD1j" --客户端名称
            rec_key = "camera_send" --接收服务端发送的字符串
            socketOpen(ip, port, client_name) ----与服务端建立通信
        point_all=0
            -- 触发拍照数据
            -- 201,1,固定，之后是关节角，位姿
            -- msg_send_G01="201,1,-92.32,7.82,-43.3,38.73,-90,-27.95,-103.18,455.55,668.42,179.86,0.057,-154.36"
        ----------------------------------------------------------
        ----------------------------------------------------------
            -- 当前点位--TCP的位姿,形式为(x,y,z,rx,ry,rz)
            currentPosLine=getTcpPose()
            -- currentPosLine=getTcpTargetPose()
            -- 将角度从弧度转换为角度
            currentPosSend = {
                currentPosLine[1] * 1000,
                currentPosLine[2] * 1000,
                currentPosLine[3] * 1000,
                toDeg(currentPosLine[4]),
                toDeg(currentPosLine[5]),
                toDeg(currentPosLine[6])
            }
            -- 当前关机角--rad
            currentJointRad = getJointPositions()-- return rad
            currentJointDeg=radToDegList(currentJointRad)
            -- currentPosSend={currentPosLine[1]*1000,currentPosLine[2]*1000,currentPosLine[3]*1000,toDeg(currentPosLine[4]),toDeg(currentPosLine[5]),toDeg(currentPosLine[6])}
        -- 构建 msg_send_G01 字符串
        -- 构建 msg_send_G01 字符串
        msg_send_G01 = string.format("201,1,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,,%.2f,%.2f",
            currentJointDeg[1], currentJointDeg[2], currentJointDeg[3],
            currentJointDeg[4], currentJointDeg[5], currentJointDeg[6],
            currentPosSend[1], currentPosSend[2], currentPosSend[3],
            currentPosSend[4], currentPosSend[5], currentPosSend[6])
            -- 打印结果
        print(msg_send_G01)
        textmsg(msg_send_G01)
        ----------------------------------------------------------
        ----------------------------------------------------------
            
            socketSendLine(msg_send_G01, client_name) --发送给服务端字符串
            sleep(2)
            msg_send_G02="203,19,1"
            socketSendLine(msg_send_G02, client_name) --发送给服务端字符串
            sleep(3)
            --接收数据
            msg_send_G03="205,1"
            socketSendLine(msg_send_G03, client_name) --发送给服务端字符串
            sleep(3)
            rec_str = ""
            -- ------------------------------------------------
            --接收服务端发送的字符串后停止循环
            while(rec_str == nil or rec_str == "") 
            do
              socketReadString(rec_key, client_name, "", "", true) 
              rec_str = getString(rec_key, "")
            end
            point_all=string.split(rec_str,",")
            -- point_get=rec_str
            -- textmsg("up point")
            textmsg(point_all[7])
            textmsg(point_all[12])
            -- textmsg("get point")
            textmsg(point_all[15])
            -- textmsg(point_all[20])
            --textmsg(point_get)
            -- --------------------------------------------------
            --设置相对移动
            --setTcpOffset({0,0,0.02,0,0,0})
            point_getUp_Rad={toRad(point_all[8]),toRad(point_all[9]),toRad(point_all[10]),toRad(point_all[11]),toRad(point_all[12]),toRad(point_all[13])}
            point_get_Rad={toRad(point_all[16]),toRad(point_all[17]),toRad(point_all[18]),toRad(point_all[19]),toRad(point_all[20]),toRad(point_all[21])}
            sleep(0.1)
            textmsg("point_getUp_Rad result")
            textmsg(table.concat(point_getUp_Rad,","))
            textmsg(table.concat(radToDegList(point_getUp_Rad),"."))
            textmsg("point_get_Rad result")
            textmsg(table.concat(point_get_Rad,","))
            textmsg(table.concat(radToDegList(point_get_Rad),"."))
            ---------------------------主控部分--------------------------------
            --机械臂移动控制区
            moveJoint(point_getUp_Rad, 1.0, 1.0, 0, 0)
            moveJoint(point_get_Rad, 1.0, 1.0, 0, 0)
            sleep(2)
            --抓取
                modbusSetOutputSignal('control', 1035)
                sleep(2)
            moveJoint(point_getUp_Rad, 1.0, 1.0, 0, 0)
            socketClose(client_name)
        --subscript context end
        
        setLabel(17, "关节运动")
        setLabel(18, "路点_0")
        moveJoint(inverseKinematics(u8defu70b9_0_q, u8defu70b9_0_p), 1.39626, 1.0472, 0, 0)
        
        setLabel(19, "等待：1.00s")
        sleep(1)
        
        setLabel(20, "路点_1")
        moveJoint(inverseKinematics(u8defu70b9_1_q, u8defu70b9_1_p), 1.39626, 1.0472, 0, 0)
        
        setLabel(21, "等待：1.00s")
        sleep(1)
        
        setLabel(22, "getDAup")
        moveJoint(inverseKinematics(getDAup_q, getDAup_p), 1.39626, 1.0472, 0, 0)
        
        setLabel(23, "getDA")
        moveJoint(inverseKinematics(getDA_q, getDA_p), 1.39626, 1.0472, 0, 0)
        
        setLabel(24, "设置 control=811")
        modbusSetOutputSignal('control', 811)
        
        setLabel(25, "等待：1.50s")
        sleep(1.5)
        
        setLabel(26, "getDAup")
        moveJoint(inverseKinematics(getDAup_q, getDAup_p), 1.39626, 1.0472, 0, 0)
        
        setLabel(27, "homeB")
        moveJoint(inverseKinematics(homeB_q, homeB_p), 1.39626, 1.0472, 0, 0)
        
        setLabel(28, "等待：5.00s")
        sleep(5)
        
        sched.sync_program_point()
        if (currentPointA == 1.02256) then
            setLabel(29, "如果 currentPointA == 1.02256")
            setLabel(30, "关节运动")
            setLabel(31, "路点_2")
            moveJoint(inverseKinematics(u8defu70b9_2_q, u8defu70b9_2_p), 1.39626, 1.0472, 0, 0)
            
            setLabel(32, "路点_3")
            moveJoint(inverseKinematics(u8defu70b9_3_q, u8defu70b9_3_p), 1.39626, 1.0472, 0, 0)
        end
        sched.cancel_point()
    end
end

function app:start(api)
  --
  self.api = api
  print("start---")
  p_QQ1029()
end

function app:robot_error_handler(name, err)
  --
  print("An error hanppen to robot "..name)
end

-- return our app object
return app


