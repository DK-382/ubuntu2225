--- Auto generated by 'aubo_scope' v0.31.0-alpha.58 2024-08-13 14:32:46
--- DO NOT MODIFY IT!
local app = {}
local aubo = require('aubo')
local sched = sched or aubo.sched
local math = aubo.math or math
local realtime = aubo.realtime or realtime

local sleep = sched.sleep
local thread = sched.thread
local sync = sched.sync
local run = sched.run
local kill = sched.kill
local halt = sched.halt

app.PRIORITY = 1000 -- set the app priority, which determines app execution order
app.VERSION = "0.1"
app.VENDOR = "Aubo Robotics"

function p_AGV()
    local _ENV = sched.select_robot(1)
    setCollisionStopType(1)
    setCollisionLevel(0)
    setHardwareCustomParameters("[over_force_config] \n    is_enable =false")
    setHardwareCustomParameters("handle_enable=false")
    setFreedriveDamp({0.5,0.5,0.5,0.5,0.5,0.5})
    gripper_service = sched.jsonrpc.proxy('http://127.0.0.1:8890/jsonrpc')
    setHomePosition({0,-0.2617993877991494,1.74532925199433,0.4363323129985824,1.570796326794897,0}    )
    modbusDeleteAllSignals()
    setDigitalInputActionDefault()
    setDigitalOutputRunstateDefault()
    modbusAddSignal("/dev/ttyUSB0,115200,N,8,1", 9, 1000, 3, "control", false)
    modbusAddSignal("192.168.192.5,502", 1, 0, 3, "agvGo", true)
    modbusAddSignal("192.168.192.5,502", 1, 18, 0, "agvOK", true)
    modbusAddSignal("192.168.192.5,502", 1, 8, 2, "agvOver", true)
    setPayload(0, {0,-0.1,-0.08}, {0,0,0}, {0,0,0,0,0,0,0,0,0})
    local agv =sched.jsonrpc.proxy('http://127.0.0.1:8989/jsonrpc')
    setTcpOffset({0,0,0,0,0,0})
    setToolVoltageOutputDomain(0)
    setToolIoInput(0, true)
    setToolIoInput(1, true)
    setToolIoInput(2, true)
    setToolIoInput(3, true)
    u5e73u9762_0= {}
    setLabel(1, "初始变量")
    u57fau5ea7 = {0,0,0,0,0,0}
    u5de5u5177 = {0,0,0,0,0,0}
    
    setLabel(2, "机器人编程")
    setLabel(3, "Seeragv  Move To: LM1 ")
    function waitForMotionComplete()
      sleep(0)
    end
    waitForMotionComplete()
    agv.robot_task_gotarget_req("LM1",-2147483648,-2147483648,-2147483648,-2147483648,"")
    while true do
        if (agv.robot_status_task_req()=="COMPLETED") then
            print("Navigation has completed.")
            break
        else
            sleep(0.1)
            print("Navigation is running...")
        end
    end
    
    setLabel(4, "Seeragv  Move To: LM2 ")
    function waitForMotionComplete()
      sleep(0)
    end
    waitForMotionComplete()
    agv.robot_task_gotarget_req("LM2",-2147483648,-2147483648,-2147483648,-2147483648,"")
    while true do
        if (agv.robot_status_task_req()=="COMPLETED") then
            print("Navigation has completed.")
            break
        else
            sleep(0.1)
            print("Navigation is running...")
        end
    end
end

function app:start(api)
  --
  self.api = api
  print("start---")
  p_AGV()
end

function app:robot_error_handler(name, err)
  --
  print("An error hanppen to robot "..name)
end

-- return our app object
return app


