--- Auto generated by 'aubo_scope' v0.31.0-alpha.58 2024-12-23 14:12:31
--- DO NOT MODIFY IT!
local app = {}
local aubo = require('aubo')
local sched = sched or aubo.sched
local math = aubo.math or math
local realtime = aubo.realtime or realtime

local sleep = sched.sleep
local thread = sched.thread
local sync = sched.sync
local run = sched.run
local kill = sched.kill
local halt = sched.halt

app.PRIORITY = 1000 -- set the app priority, which determines app execution order
app.VERSION = "0.1"
app.VENDOR = "Aubo Robotics"

function p_B11()
    local _ENV = sched.select_robot(1)
    setCollisionStopType(1)
    setCollisionLevel(0)
    setHardwareCustomParameters("[over_force_config] \n    is_enable =true")
    setHardwareCustomParameters("handle_enable=false")
    setFreedriveDamp({0.5,0.5,0.5,0.5,0.5,0.5})
    gripper_service = sched.jsonrpc.proxy('http://127.0.0.1:8890/jsonrpc')
    setHomePosition({0,-0.2617993877991494,1.74532925199433,0.4363323129985824,1.570796326794897,0}    )
    modbusDeleteAllSignals()
    setDigitalInputActionDefault()
    setDigitalOutputRunstateDefault()
    modbusAddSignal("/dev/ttyUSB0,115200,N,8,1", 9, 1000, 3, "control", false)
    modbusAddSignal("192.168.192.5,502", 1, 0, 3, "agvGo", true)
    modbusAddSignal("192.168.192.5,502", 1, 18, 0, "agvOK", true)
    modbusAddSignal("192.168.192.5,502", 1, 8, 2, "agvOver", true)
    modbusAddSignal("192.168.192.5,502", 1, 110, 3, "start", true)
    modbusAddSignal("192.168.192.5,502", 1, 111, 3, "finish", true)
    setPayload(3, {0,0,0}, {0,0,0}, {0,0,0,0,0,0,0,0,0})
    local agv =sched.jsonrpc.proxy('http://127.0.0.1:8989/jsonrpc')
    setTcpOffset({0,0,0,0,0,0})
    setToolVoltageOutputDomain(0)
    setToolIoInput(0, true)
    setToolIoInput(1, true)
    setToolIoInput(2, true)
    setToolIoInput(3, true)
    u5e73u9762_0= {}
    tableUp = 0
    tableGet = 0
    point_get = 0
    point_up = 0
    gdddd = 0
    PUT22 = 0
    PutUpJointRad = 0
    GetDeg = 0
    GetUpDeg = 0
    currentPointA = 0
    currentJointDeg = {-98.9571, 21.2067, -49.0197, 19.771, -89.9987, -30.1854}
    msg_AGV_G011 = 0
    setLabel(1, "初始变量")
    u57fau5ea7 = {0,0,0,0,0,0}
    u5de5u5177 = {0,0,0,0,0,0}
    u8defu70b9_0_p = {-0.6450151429346498,-0.06219385861271837,0.5317009086074977,3.141532074035668,5.506790170043025e-05,-1.229045611280148}    
    u8defu70b9_0_q = {-0.1700859144435328,0.181634806819703,-1.113341393092991,0.2757403396938155,-1.570814666935084,-0.5118366323579299}    
    
    setLabel(2, "机器人编程")
    setLabel(3, "直线运动")
    setLabel(4, "路点_0")
    moveLine(u8defu70b9_0_p, 1.2, 0.25, 0, 0)
    
    handler_thread_move_5=thread(function()
        setLabel(5, "方向:基座 X+")
        -- enter_critical
        sched.INST([[flag_thread_move_5 = 1]], _ENV)
        towardsPos=calculate_point_to_move_towards(u57fau5ea7, {1.0,0.0,0.0}, 0.02)
        moveLine(towardsPos, 1.2, 0.25, 0, 0)
        sched.INST([[flag_thread_move_5 = 2]], _ENV)
        -- exit_critical
    end, "thread_move_5")
    
    flag_thread_move_5 = 0
    run(handler_thread_move_5)
    while true do
        setLabel(6, "直到固定距离：20 mm")
        sleep(1e-10)
        if (flag_thread_move_5 > 1) then
            kill(handler_thread_move_5)
            break
        end
        sync()
    end
    
    handler_thread_move_7=thread(function()
        setLabel(7, "方向:基座 Y+")
        -- enter_critical
        sched.INST([[flag_thread_move_7 = 1]], _ENV)
        towardsPos=calculate_point_to_move_towards(u57fau5ea7, {0.0,1.0,0.0}, 0.02)
        moveLine(towardsPos, 1.2, 0.25, 0, 0)
        sched.INST([[flag_thread_move_7 = 2]], _ENV)
        -- exit_critical
    end, "thread_move_7")
    
    flag_thread_move_7 = 0
    run(handler_thread_move_7)
    while true do
        setLabel(8, "直到固定距离：20 mm")
        sleep(1e-10)
        if (flag_thread_move_7 > 1) then
            kill(handler_thread_move_7)
            break
        end
        sync()
    end
    
    handler_thread_move_9=thread(function()
        setLabel(9, "方向:基座 X+")
        -- enter_critical
        sched.INST([[flag_thread_move_9 = 1]], _ENV)
        towardsPos=calculate_point_to_move_towards(u57fau5ea7, {1.0,0.0,0.0}, 0.02)
        moveLine(towardsPos, 1.2, 0.25, 0, 0)
        sched.INST([[flag_thread_move_9 = 2]], _ENV)
        -- exit_critical
    end, "thread_move_9")
    
    flag_thread_move_9 = 0
    run(handler_thread_move_9)
    while true do
        setLabel(10, "直到固定距离：20 mm")
        sleep(1e-10)
        if (flag_thread_move_9 > 1) then
            kill(handler_thread_move_9)
            break
        end
        sync()
    end
    
    handler_thread_move_11=thread(function()
        setLabel(11, "方向:基座 Y+")
        -- enter_critical
        sched.INST([[flag_thread_move_11 = 1]], _ENV)
        towardsPos=calculate_point_to_move_towards(u57fau5ea7, {0.0,1.0,0.0}, 0.02)
        moveLine(towardsPos, 1.2, 0.25, 0, 0)
        sched.INST([[flag_thread_move_11 = 2]], _ENV)
        -- exit_critical
    end, "thread_move_11")
    
    flag_thread_move_11 = 0
    run(handler_thread_move_11)
    while true do
        setLabel(12, "直到固定距离：20 mm")
        sleep(1e-10)
        if (flag_thread_move_11 > 1) then
            kill(handler_thread_move_11)
            break
        end
        sync()
    end
    
    setLabel(13, "路点_0")
    moveLine(u8defu70b9_0_p, 1.2, 0.25, 0, 0)
end

function app:start(api)
  --
  self.api = api
  print("start---")
  p_B11()
end

function app:robot_error_handler(name, err)
  --
  print("An error hanppen to robot "..name)
end

-- return our app object
return app


