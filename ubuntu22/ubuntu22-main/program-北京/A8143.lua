--- Auto generated by 'aubo_scope' v0.31.0-alpha.58 2024-08-17 13:12:10
--- DO NOT MODIFY IT!
local app = {}
local aubo = require('aubo')
local sched = sched or aubo.sched
local math = aubo.math or math
local realtime = aubo.realtime or realtime

local sleep = sched.sleep
local thread = sched.thread
local sync = sched.sync
local run = sched.run
local kill = sched.kill
local halt = sched.halt

app.PRIORITY = 1000 -- set the app priority, which determines app execution order
app.VERSION = "0.1"
app.VENDOR = "Aubo Robotics"

function p_A8143()
    local _ENV = sched.select_robot(1)
    setCollisionStopType(1)
    setCollisionLevel(2)
    setHardwareCustomParameters("[over_force_config] \n    is_enable =true")
    setHardwareCustomParameters("handle_enable=false")
    setFreedriveDamp({0.5,0.5,0.5,0.5,0.5,0.5})
    gripper_service = sched.jsonrpc.proxy('http://127.0.0.1:8890/jsonrpc')
    setHomePosition({0,-0.2617993877991494,1.74532925199433,0.4363323129985824,1.570796326794897,0}    )
    modbusDeleteAllSignals()
    setDigitalInputActionDefault()
    setDigitalOutputRunstateDefault()
    modbusAddSignal("/dev/ttyUSB0,115200,N,8,1", 9, 1000, 3, "control", false)
    modbusAddSignal("192.168.192.5,502", 1, 0, 3, "agvGo", true)
    modbusAddSignal("192.168.192.5,502", 1, 18, 0, "agvOK", true)
    modbusAddSignal("192.168.192.5,502", 1, 8, 2, "agvOver", true)
    setPayload(3, {0,0,0}, {0,0,0}, {0,0,0,0,0,0,0,0,0})
    local agv =sched.jsonrpc.proxy('http://127.0.0.1:8989/jsonrpc')
    setTcpOffset({0,0,0,0,0,0})
    setToolVoltageOutputDomain(0)
    setToolIoInput(0, true)
    setToolIoInput(1, true)
    setToolIoInput(2, true)
    setToolIoInput(3, true)
    u5e73u9762_0= {}
    tableUp = 0
    tableGet = 0
    point_get = 0
    point_up = 0
    gdddd = 0
    PUT22 = 0
    PutUpJointRad = 0
    GetDeg = 0
    GetUpDeg = 0
    currentPoint = 0
    setLabel(1, "初始变量")
    u57fau5ea7 = {0,0,0,0,0,0}
    u5de5u5177 = {0,0,0,0,0,0}
    PUT0_p = {-0.09405717358581661,0.5149632598665251,0.2202961926323803,1.556596241049699,0.4241110803791184,3.12235354228847}    
    PUT0_q = {-1.633479379185494,0.6357279473537837,-2.026986760880853,-2.675672396205753,-1.521512702082548,-0.4235141852420735}    
    gdddd_0_p = {-0.09156756597549007,0.5546094880319538,0.5111636565875596,2.123370195132839,0.3412762355732998,-2.943977860105963}    
    gdddd_0_q = {-1.63349162615514,0.1083397552308542,-1.62002302128696,-1.210284191125561,-1.521454013633947,-0.4234151484850601}    
    pzd4_p = {-0.07888439999566645,0.5250757253967675,0.6029207922775044,2.97319780134579,0.1168737101306469,-2.713720538501295}    
    pzd4_q = {-1.649042215863138,0.1279655240885559,-1.039559524460714,0.1995077129896815,-1.59009382230038,-0.5179659072086543}    
    u8defu70b9_0_p = {-0.3899372903228141,0.04229275100658898,0.2946139088433692,3.141290594768136,0.0004527424804051677,-1.139732032581246}    
    u8defu70b9_0_q = {-0.4229735906636156,-0.2003665468932473,-2.133504779376866,-0.3628816817815849,-1.57086601932761,-0.8540379720638803}    
    
    setLabel(2, "机器人编程")
    setLabel(3, "tableUp:=0")
    sched.INST([[ tableUp = 0 ]], _ENV)
    
    setLabel(4, "tableGet:=0")
    sched.INST([[ tableGet = 0 ]], _ENV)
    
    setLabel(5, "point_get:=0")
    sched.INST([[ point_get = 0 ]], _ENV)
    
    setLabel(6, "point_up:=0")
    sched.INST([[ point_up = 0 ]], _ENV)
    
    setLabel(7, "关节运动")
    setLabel(8, "路点_0")
    moveJoint(inverseKinematics(u8defu70b9_0_q, u8defu70b9_0_p), 1.39626, 1.0472, 0, 0)
    
    setLabel(9, "Ca.lua")
    --subscript context start
        --自定义函数区
        pi = 3.1416
        --弧度转换函数单个
        function toRad(degs)
            if degs==nil or degs=="" then
                return nil
            end
            return degs*(pi/180) 
        end
        -- 弧度转角度单个
        function toDeg(rads)
            if rads==nil or rads =="" then
                return nil
            end
            return rads*(180/pi)
        end
        
        -- 将角度列表转换为弧度列表
        function degToRadList(degrees)
            local radians = {}
            for i,j in ipairs(degrees) do
                radians[i] =j*(pi/180)
            end
            return radians
        end
        
        -- 将弧度列表转换为角度列表
        function radToDegList(radians)
            local degrees = {}
            for a,b in ipairs(radians) do
                degrees[a] =b*(180/pi)
            end
            return degrees
        end
        -------
    
    
    
    currentPointA=getTcpPose()
    textmsg("当前位姿点位point ")
    textmsg(table.concat(currentPointA,","))
    currentPointOK={currentPointA[1]*1000,currentPointA[2]*1000,currentPointA[3]*1000,toDeg(currentPointA[4]),toDeg(currentPointA[5]),toDeg(currentPointA[6])}
    textmsg(table.concat(currentPointOK,","))
    
    currentJointA = getJointPositions()
    textmsg("当前关节点位 joint ")
    textmsg(table.concat(currentJointA,","))
    currentJointDeg=radToDegList(getJointPositions)
    textmsg(table.concat(currentJointDeg,","))
    
    sleep(1)
    msg_AGV_G011="201,1"..table.concat(currentJointDeg,",")..table.concat(currentPointOK,",")
    
    textmsg(msg_AGV_G011)
    --subscript context end
    
    sched.sync_program_point()
    if (gdddd_0 == 0.2115554) then
        setLabel(10, "如果 gdddd_0 == 0.2115554")
        setLabel(11, "关节运动")
        setLabel(12, "pzd4")
        setTcpOffset({0,0,0,0,0,0})
        moveJoint(inverseKinematics(pzd4_q, pzd4_p), 1.39626, 1.0472, 0, 0)
        
        setLabel(13, "paizhao41.lua")
        --subscript context start
        --分割字符串函数--输出列表table
        function string.split(str,delimiter)
        	if str  ==  nil or str ==  ''  or  delimiter  == nil then
           return  nil
        	end
        	local  result =  {}
        	for match in  (str..delimiter):gmatch("(.-)"..delimiter) do
           table.insert(result,match)
        	end
        	return result
        end
        --弧度转换函数
        pi = 3.1416
        function toRad(deg)
        return deg*pi/180 
        end
        ------------------------------------------------------------------
        ip = "192.168.192.111" --服务端IP地址
        port = 55000 --串口号
        client_name = "socoo21" --客户端名称
        rec_key = "camera_send2" --接收服务端发送的字符串
        socketOpen(ip, port, client_name) ----与服务端建立通信
        sleep(2)
        -- 发送拍照数据
        msg_send_10="201,1,-94.48,7.33,-59.56,11.43,-91.11,-29.68,-78.88,525.08,602.92,170.34,6.7,-155.5"
        socketSendLine(msg_send_10, client_name) --发送给服务端字符串
        sleep(2)
        msg_send_11="203,10,2"
        socketSendLine(msg_send_11, client_name) --发送给服务端字符串
        sleep(2)
        msg_send_12="205,1"
        socketSendLine(msg_send_12, client_name) --发送给服务端字符串
        sleep(2)
        rec_str = ""
        -- ------------------------------------------------
        --接收服务端发送的字符串后停止循环
        while(rec_str == nil or rec_str == "") 
        do
          socketReadString(rec_key, client_name, "", "", true) 
          --sleep(0.01)
          rec_str = getString(rec_key, "")
          --textmsg(rec_str)
          --sleep(0.001)
        end
        point_up=string.split(rec_str,",")
        point_get=rec_str
        textmsg("up point")
        textmsg(point_up[7])
        textmsg(point_up[12])
        textmsg("get point")
        textmsg(point_up[15])
        textmsg(point_up[20])
         
        textmsg(point_get)
        -- --------------------------------------------------
        tableUp={toRad(point_up[7]),toRad(point_up[8]),toRad(point_up[9]),toRad(point_up[10]),toRad(point_up[11]),toRad(point_up[12])}
        tableGet={toRad(point_up[15]),toRad(point_up[16]),toRad(point_up[17]),toRad(point_up[18]),toRad(point_up[19]),toRad(point_up[20])}
        --机械臂移动
        -- --------------------------------------------------
        tableGdd41={toRad(-93.59),toRad(6.21),toRad(-92.81),toRad(-69.33),toRad(-87.17),toRad(-24.26)}
        tableGdd42={toRad(-93.59),toRad(13.09),toRad(-107.41),toRad(-107.69),toRad(-87.17),toRad(-24.27)}
        tableGdd43={toRad(-93.59),toRad(23.09),toRad(-114.39),toRad(-139.07),toRad(-87.17),toRad(-24.26)}
        -- 过渡点固定
        moveJoint(tableGdd41, 1.0, 1.0, 0, 0)
        moveJoint(tableGdd42, 1.0, 1.0, 0, 0)
        moveJoint(tableGdd43, 1.0, 1.0, 0, 0)
        sleep(1)
        --UP点
        moveLine(tableUp, 1.0, 1.0, 0, 0)
        --PUT点
        moveLine(tableGet, 1.0, 1.0, 0, 0)
        sleep(2)
        --放置
            modbusSetOutputSignal('control', 299)
            sleep(2)
        moveJoint(tableUp, 1.0, 1.0, 0, 0)
        -- 过渡点固定
        moveJoint(tableGdd43, 1.0, 1.0, 0, 0)
        moveJoint(tableGdd41, 1.0, 1.0, 0, 0)
        -- --------------------------------------------------
        socketClose(client_name)
        --subscript context end
    end
end

function app:start(api)
  --
  self.api = api
  print("start---")
  p_A8143()
end

function app:robot_error_handler(name, err)
  --
  print("An error hanppen to robot "..name)
end

-- return our app object
return app


