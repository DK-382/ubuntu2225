--- Auto generated by 'aubo_scope' v0.31.0-alpha.58 2024-12-22 14:16:12
--- DO NOT MODIFY IT!
local app = {}
local aubo = require('aubo')
local sched = sched or aubo.sched
local math = aubo.math or math
local realtime = aubo.realtime or realtime

local sleep = sched.sleep
local thread = sched.thread
local sync = sched.sync
local run = sched.run
local kill = sched.kill
local halt = sched.halt

app.PRIORITY = 1000 -- set the app priority, which determines app execution order
app.VERSION = "0.1"
app.VENDOR = "Aubo Robotics"

function p_agvGooo()
    local _ENV = sched.select_robot(1)
    setCollisionStopType(1)
    setCollisionLevel(2)
    setHardwareCustomParameters("[over_force_config] \n    is_enable =true")
    setHardwareCustomParameters("handle_enable=false")
    setFreedriveDamp({0.5,0.5,0.5,0.5,0.5,0.5})
    gripper_service = sched.jsonrpc.proxy('http://127.0.0.1:8890/jsonrpc')
    setHomePosition({0,-0.2617993877991494,1.74532925199433,0.4363323129985824,1.570796326794897,0}    )
    modbusDeleteAllSignals()
    setDigitalInputActionDefault()
    setDigitalOutputRunstateDefault()
    modbusAddSignal("/dev/ttyUSB0,115200,N,8,1", 9, 1000, 3, "control", false)
    modbusAddSignal("192.168.192.5,502", 1, 0, 3, "agvGo", true)
    modbusAddSignal("192.168.192.5,502", 1, 18, 0, "agvOK", true)
    modbusAddSignal("192.168.192.5,502", 1, 8, 2, "agvOver", true)
    modbusAddSignal("192.168.192.5,502", 1, 110, 3, "start", true)
    modbusAddSignal("192.168.192.5,502", 1, 111, 3, "finish", true)
    setPayload(3, {0,0,0}, {0,0,0}, {0,0,0,0,0,0,0,0,0})
    local agv =sched.jsonrpc.proxy('http://127.0.0.1:8989/jsonrpc')
    setTcpOffset({0,0,0,0,0,0})
    setToolVoltageOutputDomain(0)
    setToolIoInput(0, true)
    setToolIoInput(1, true)
    setToolIoInput(2, true)
    setToolIoInput(3, true)
    u5e73u9762_0= {}
    tableUp = 0
    tableGet = 0
    point_get = 0
    point_up = 0
    gdddd = 0
    PUT22 = 0
    PutUpJointRad = 0
    GetDeg = 0
    GetUpDeg = 0
    currentPointA = 0
    currentJointDeg = 0
    msg_AGV_G011 = 0
    setLabel(1, "初始变量")
    u57fau5ea7 = {0,0,0,0,0,0}
    u5de5u5177 = {0,0,0,0,0,0}
    
    setLabel(2, "机器人编程")
    setLabel(3, "AGVgo1.lua")
    --subscript context start
        modbusSetOutputSignal('agvGo', 1)
    
        sleep(2)
    
        sched.sync_program_point()
        while not (modbusGetSignalStatus('agvOver') == 4) do
            sync()
        end
    
        sleep(2)
    --subscript context end
    
    setLabel(4, "FbGet815.lua")
    --subscript context start
        pzd_p = {-0.1031820082469535,0.4555501797707873,0.6684328864473573,3.139393731061584,0.001203875487738723,-2.694252353521048}    
        pzd_q = {-1.611196017914612,0.1365598350376306,-0.7557819290510288,0.6759478747853781,-1.570829339047234,-0.4877413561793484}    
        getup_p = {-0.1447488645639831,0.615269824361797,0.503480443698855,3.141013882740093,-0.001910824776384787,1.942948688626845}    
        getup_q = {-1.533179759527233,0.3883514074743971,-0.9197045560202164,0.2607454410763638,-1.570715630178071,1.236261165687399}    
        get_p = {-0.1447424907620278,0.6152197880812216,0.433584738265234,3.140933008474006,-0.002121293887962467,1.942920704608348}    
        get_q = {-1.533185883012056,0.3560530867755055,-1.153676787622065,0.05884617380620803,-1.570722966234146,1.236275837799549}    
        homeA_p = {-0.4544123117949642,-0.06242110509652263,0.4900353489150864,3.138013982338131,0.001831212770194146,-1.229411444343532}    
        homeA_q = {-0.1315783801341234,-0.07986248906151193,-1.504062589193888,0.1425762498190679,-1.570796326794897,-0.4729665392441489}    
        agvUp_p = {-0.5528841817229943,0.0001675628573553607,0.3226104485490393,3.141409044654606,-0.0003351266064415766,-2.708064043044712}    
        agvUp_q = {-0.2218783490764318,0.1877644151275219,-1.669534457823293,-0.2868801408438157,-1.570741306374334,0.9153894090197263}    
        agvPut_p = {-0.5529880149504983,0.0001984667430490907,0.221032958929334,3.141526149503554,-0.0001707627909396595,-2.708076321665692}    
        agvPut_q = {-0.2218905960460778,0.2913247904540278,-1.833417282141131,-0.5541216595746578,-1.570744974402371,0.9153894090197263}    
        getDAup_p = {-0.1715673331850213,0.6408173035764454,0.5208749694389621,-3.141032398310408,0.001313208693756291,2.041174777894299}    
        getDAup_q = {-1.493392416889817,0.5116110334764806,-0.6854873850254478,0.3751255593708838,-1.570781654682746,1.177822142993357}    
        getDA_p = {-0.1715543219546257,0.6407608090497057,0.4476953253729113,-3.141560635772582,6.088484341388767e-07,2.041148107526952}    
        getDA_q = {-1.493407725601875,0.4494117363869003,-0.9820783724272522,0.1393190409217349,-1.570766982570596,1.17783314707747}    
        guodu_p = {-0.3968532373273362,0.2494528765124102,0.5744012429833607,3.141069945009356,0.0001670788212137123,-2.579215187952461}    
        guodu_q = {-0.8233117196790272,0.001377784085174067,-1.192606842384261,0.3763286725671959,-1.571056756785562,0.1851070349143108}    
        --分割字符串函数输出列表
        function string.split(str,delimiter)
        	if str  ==  nil or str ==  ''  or  delimiter  == nil then
           return  nil
        	end
        	local  result =  {}
        	for match in  (str..delimiter):gmatch("(.-)"..delimiter) do
           table.insert(result,match)
        	end
        	return result
        end
        
        --自定义函数区
        pi = 3.1416
        --弧度转换函数单个
        function toRad(degs)
            if degs==nil or degs=="" then
                return nil
            end
            return degs*(pi/180) 
        end
        -- 弧度转角度单个
        function toDeg(rads)
            if rads==nil or rads =="" then
                return nil
            end
            return rads*(180/pi)
        end
        
        -- 将角度列表转换为弧度列表
        function degToRadList(degrees)
            local radians = {}
            for i,j in ipairs(degrees) do
                radians[i] =j*(pi/180)
            end
            return radians
        end
        
        -- 将弧度列表转换为角度列表
        function radToDegList(radians)
            local degrees = {}
            for a,b in ipairs(radians) do
                degrees[a] =b*(180/pi)
            end
            return degrees
        end
        ---------------------------------------
        --subscript context end
        
        -- setLabel(5, "homeA")
        setTcpOffset({0,0,0,0,0,0})
        moveJoint(inverseKinematics(homeA_q, homeA_p), 1.39626, 1.0472, 0, 0)
        
        -- setLabel(6, "pzd")
        setTcpOffset({0,0,0,0,0,0})
        moveJoint(inverseKinematics(pzd_q, pzd_p), 1.39626, 1.0472, 0, 0)
        
        -- setLabel(7, "等待：2.00s")
        sleep(2)
        
        -- sched.sync_program_point()
        if (guodu == 00211) then
            -- setLabel(8, "如果 guodu == 00211")
            -- setLabel(9, "get")
            setTcpOffset({0,0,0,0,0,0})
            moveJoint(inverseKinematics(get_q, get_p), 1.39626, 1.0472, 0, 0)
            
            -- setLabel(10, "getup")
            setTcpOffset({0,0,0,0,0,0})
            moveJoint(inverseKinematics(getup_q, getup_p), 1.39626, 1.0472, 0, 0)
            
            -- setLabel(11, "homeA")
            setTcpOffset({0,0,0,0,0,0})
            moveJoint(inverseKinematics(homeA_q, homeA_p), 1.39626, 1.0472, 0, 0)
        end
        
        -- setLabel(12, "fget1.lua")
        --subscript context start
        ----------------------------------------------------------
        ip = "192.168.192.111" --服务端IP地址
        port = 55000 --串口号
        client_name = "sockebvcm1" --客户端名称
        rec_key = "camera_send" --接收服务端发送的字符串
        socketOpen(ip, port, client_name) ----与服务端建立通信
        -- 触发拍照数据
        -- 201,1,固定，之后是关节角，位姿
        msg_send_G01="201,1,-92.32,7.82,-43.3,38.73,-90,-27.95,-103.18,455.55,668.42,179.86,0.057,-154.36"
        socketSendLine(msg_send_G01, client_name) --发送给服务端字符串
        sleep(2)
        msg_send_G02="203,10,1"
        socketSendLine(msg_send_G02, client_name) --发送给服务端字符串
        sleep(2)
        --接收数据
        msg_send_G03="205,1"
        socketSendLine(msg_send_G03, client_name) --发送给服务端字符串
        sleep(2)
        rec_str = ""
        -- ------------------------------------------------
        --接收服务端发送的字符串后停止循环
        while(rec_str == nil or rec_str == "") 
        do
          socketReadString(rec_key, client_name, "", "", true) 
          rec_str = getString(rec_key, "")
        end
        point_all=string.split(rec_str,",")
        -- point_get=rec_str
        -- textmsg("up point")
        -- textmsg(point_all[7])
        -- textmsg(point_all[12])
        -- textmsg("get point")
        -- textmsg(point_all[15])
        -- textmsg(point_all[20])
        --textmsg(point_get)
        -- --------------------------------------------------
        --设置相对移动
        --setTcpOffset({0,0,0.02,0,0,0})
        point_getUp_Rad={toRad(point_all[8]),toRad(point_all[9]),toRad(point_all[10]),toRad(point_all[11]),toRad(point_all[12]),toRad(point_all[13])}
        point_get_Rad={toRad(point_all[16]),toRad(point_all[17]),toRad(point_all[18]),toRad(point_all[19]),toRad(point_all[20]),toRad(point_all[21])}
        sleep(0.1)
        textmsg("point_getUp_Rad result")
        textmsg(table.concat(point_getUp_Rad,","))
        textmsg(table.concat(radToDegList(point_getUp_Rad),"."))
        textmsg("point_get_Rad result")
        textmsg(table.concat(point_get_Rad,","))
        textmsg(table.concat(radToDegList(point_get_Rad),"."))
        ---------------------------主控部分--------------------------------
        --机械臂移动控制区
        moveJoint(point_getUp_Rad, 1.0, 1.0, 0, 0)
        moveJoint(point_get_Rad, 1.0, 1.0, 0, 0)
        sleep(2)
        --抓取
            modbusSetOutputSignal('control', 1035)
            sleep(2)
        moveJoint(point_getUp_Rad, 1.0, 1.0, 0, 0)
        socketClose(client_name)
        textmsg("script running finish")
        --subscript context end
        
        -- setLabel(13, "关节运动")
        -- setLabel(14, "guodu")
        setTcpOffset({0,0,0,0,0,0})
        moveJoint(inverseKinematics(guodu_q, guodu_p), 1.39626, 1.0472, 0, 0)
        
        -- sched.sync_program_point()
        if (get == 123326.23) then
            -- setLabel(15, "如果 get == 123326.23")
            -- setLabel(16, "关节运动")
            -- setLabel(17, "agvUp")
            setTcpOffset({0,0,0,0,0,0})
            moveJoint(inverseKinematics(agvUp_q, agvUp_p), 1.39626, 1.0472, 0, 0)
            
            -- setLabel(18, "agvPut")
            setTcpOffset({0,0,0,0,0,0})
            moveJoint(inverseKinematics(agvPut_q, agvPut_p), 1.39626, 1.0472, 0, 0)
            
            -- setLabel(19, "pzd")
            setTcpOffset({0,0,0,0,0,0})
            moveJoint(inverseKinematics(pzd_q, pzd_p), 1.39626, 1.0472, 0, 0)
            
            -- setLabel(20, "paizhao33.lua")
            --subscript context start
            ------------------------------------------------------------------
            ip = "192.168.192.111" --服务端IP地址
            port = 55000 --串口号
            client_name = "socnbbxkv1" --客户端名称
            rec_key = "camera_send" --接收服务端发送的字符串
            socketOpen(ip, port, client_name) ----与服务端建立通信
            -- 发送拍照数据
            msg_send_00="201,1,-92.32,7.82,-43.3,38.73,-90,-27.95,-103.18,455.55,668.42,179.86,0.057,154.36"
            socketSendLine(msg_send_00, client_name) --发送给服务端字符串
            sleep(3)
            msg_send_01="205,1"
            socketSendLine(msg_send_01, client_name) --发送给服务端字符串
            rec_str = ""
            -- ------------------------------------------------
            --接收服务端发送的字符串后停止循环
            while(rec_str == nil or rec_str == "") 
            do
              socketReadString(rec_key, client_name, "", "", true) 
              --sleep(0.01)
              rec_str = getString(rec_key, "")
              --textmsg(rec_str)
              --sleep(0.001)
            end
            point_up=string.split(rec_str,",")
            point_get=rec_str
            -- textmsg("up point")
            -- textmsg(point_up[7])
            -- textmsg(point_up[12])
            -- textmsg("get point")
            -- textmsg(point_up[15])
            -- textmsg(point_up[20])
             
            --textmsg(point_get)
            -- --------------------------------------------------
            --设置相对移动
            --setTcpOffset({0,0,0.02,0,0,0})
            tableUp={toRad(point_up[7]),toRad(point_up[8]),toRad(point_up[9]),toRad(point_up[10]),toRad(point_up[11]),toRad(point_up[12])}
            tableGet={toRad(point_up[15]),toRad(point_up[16]),toRad(point_up[17]),toRad(point_up[18]),toRad(point_up[19]),toRad(point_up[20])}
            --机械臂移动
            moveJoint(tableUp, 1.0, 1.0, 0, 0)
            moveJoint(tableGet, 1.0, 1.0, 0, 0)
            --moveLine(tableGet, 1.0, 1.0, 0, 0)
            sleep(1.5)
            --抓取
                modbusSetOutputSignal('control', 555)
                sleep(3)
            moveJoint(tableUp, 1.0, 1.0, 0, 0)
            socketClose(client_name)
            --subscript context end
        end
        
        -- setLabel(21, "关节运动")
        -- setLabel(22, "agvUp")
        setTcpOffset({0,0,0,0,0,0})
        moveJoint(inverseKinematics(agvUp_q, agvUp_p), 1.39626, 1.0472, 0, 0)
        
        -- setLabel(23, "直线运动")
        -- setLabel(24, "agvPut")
        setTcpOffset({0,0,0,0,0,0})
        moveLine(agvPut_p, 0.6, 0.2, 0, 0)
        
        -- setLabel(25, "等待：1.00s")
        sleep(1)
        
        -- setLabel(26, "设置 control=811")
        modbusSetOutputSignal('control', 811)
        
        -- setLabel(27, "等待：1.00s")
        sleep(1)
        
        -- setLabel(28, "agvUp")
        setTcpOffset({0,0,0,0,0,0})
        moveLine(agvUp_p, 0.6, 0.2, 0, 0)
        
        -- setLabel(29, "关节运动")
        -- setLabel(30, "homeA")
        setTcpOffset({0,0,0,0,0,0})
        moveJoint(inverseKinematics(homeA_q, homeA_p), 1.39626, 1.0472, 0, 0)
        
        -- sched.sync_program_point()
        if (agvPut == 123.0226) then
            -- setLabel(31, "如果 agvPut == 123.0226")
            -- setLabel(32, "关节运动")
            -- setLabel(33, "getDAup")
            moveJoint(inverseKinematics(getDAup_q, getDAup_p), 1.39626, 1.0472, 0, 0)
            
            -- setLabel(34, "getDA")
            moveJoint(inverseKinematics(getDA_q, getDA_p), 1.39626, 1.0472, 0, 0)
            
            -- setLabel(35, "getDAup")
            moveJoint(inverseKinematics(getDAup_q, getDAup_p), 1.39626, 1.0472, 0, 0)
            
            -- setLabel(36, "关节运动")
            -- setLabel(37, "pzd")
            moveJoint(inverseKinematics(pzd_q, pzd_p), 1.39626, 1.0472, 0, 0)
        end
    --subscript context end
    
    setLabel(5, "AGVgo4.lua")
    --subscript context start
        modbusSetOutputSignal('agvGo', 4)
    
        sleep(2)
    
        sched.sync_program_point()
        while not (modbusGetSignalStatus('agvOver') == 4) do
            sync()
        end
        
        sleep(2)
    --subscript context end
    
    setLabel(6, "FbPut815.lua")
    --subscript context start
        PUT0_p = {-0.09405717358581661,0.5149632598665251,0.2202961926323803,1.556596241049699,0.4241110803791184,3.12235354228847}    
        PUT0_q = {-1.633479379185494,0.6357279473537837,-2.026986760880853,-2.675672396205753,-1.521512702082548,-0.4235141852420735}    
        gdddd_0_p = {-0.09156756597549007,0.5546094880319538,0.5111636565875596,2.123370195132839,0.3412762355732998,-2.943977860105963}    
        gdddd_0_q = {-1.63349162615514,0.1083397552308542,-1.62002302128696,-1.210284191125561,-1.521454013633947,-0.4234151484850601}    
        home_p = {-0.4544152351695102,-0.06242725084117734,0.4900401990600344,3.137970098678655,0.001824641922340693,-1.229442583631309}    
        home_q = {-0.1315691949068889,-0.07986248906151193,-1.504059527451476,0.14254323756673,-1.570770650598634,-0.4729261909357361}    
        guoduP_p = {-0.3060260628975479,0.4370585265106329,0.5168923333757471,3.141579536986883,-5.077636459379882e-05,-2.711998271712214}    
        guoduP_q = {-1.189685940123692,0.1241842722103559,-1.221215763477298,0.2253856507945059,-1.570744974402371,-0.04848399460016566}    
        getAgv_p = {-0.533681353940568,0.01494128623528647,0.2134221126273173,3.126023750350126,-0.06438758182580688,-2.6987595348169}    
        getAgv_q = {-0.2629822409507915,0.2558881837833508,-1.925419579864233,-0.6696351985327768,-1.540909234345044,0.8663662142980426}    
        pzdP_p = {-0.07888185539331988,0.5250658662098695,0.6029360744388264,2.973176433064089,0.1169136458560592,-2.713697480829573}    
        pzdP_q = {-1.649045277605549,0.1279440918916754,-1.039553400975891,0.1994967089055689,-1.590112162440567,-0.5179989194609922}    
        getAgvUp_p = {-0.5334832884205527,0.01488796355627588,0.2931908194090832,3.125903296157543,-0.06452828414514672,-2.698748116000355}    
        getAgvUp_q = {-0.2629822409507915,0.1570643239674321,-1.806951580736143,-0.4525282870189921,-1.540909234345044,0.8663625462700052}    
        fangddd_p = {-0.1025552317791202,0.5068365165087552,0.222393491096502,1.59761610666778,0.417620414204506,3.105384172916729}    
        fangddd_q = {-1.606128834223582,0.6104685724589256,-2.054407725918229,-2.640360290288383,-1.582548688627166,-0.4174619389801372}    
        fupggg_p = {-0.1025711923774558,0.5067629098910372,0.3315652745983338,1.596528946050601,0.4175933984772162,3.104978126833067}    
        fupggg_q = {-1.606104340284291,0.3669161488515001,-2.010826884432967,-2.354217423080113,-1.582537684543053,-0.4174325947558369}    
        
        setTcpOffset({0,0,0,0,0,0})
        moveJoint(inverseKinematics(home_q, home_p), 1.0472, 0.872665, 0, 0)
        
        -- setLabel(5, "funcA.lua")
        --subscript context start
        --分割字符串函数输出列表
        function string.split(str,delimiter)
        	if str  ==  nil or str ==  ''  or  delimiter  == nil then
           return  nil
        	end
        	local  result =  {}
        	for match in  (str..delimiter):gmatch("(.-)"..delimiter) do
           table.insert(result,match)
        	end
        	return result
        end
        
        --自定义函数区
        pi = 3.1416
        --弧度转换函数单个
        function toRad(degs)
            if degs==nil or degs=="" then
                return nil
            end
            return degs*(pi/180) 
        end
        -- 弧度转角度单个
        function toDeg(rads)
            if rads==nil or rads =="" then
                return nil
            end
            return rads*(180/pi)
        end
        
        -- 将角度列表转换为弧度列表
        function degToRadList(degrees)
            local radians = {}
            for i,j in ipairs(degrees) do
                radians[i] =j*(pi/180)
            end
            return radians
        end
        
        -- 将弧度列表转换为角度列表
        function radToDegList(radians)
            local degrees = {}
            for a,b in ipairs(radians) do
                degrees[a] =b*(180/pi)
            end
            return degrees
        end
        ---------------------------------------
        --subscript context end
        
        -- setLabel(6, "关节运动")
        -- setLabel(7, "getAgvUp")
        setTcpOffset({0,0,0,0,0,0})
        moveJoint(inverseKinematics(getAgvUp_q, getAgvUp_p), 1.0472, 0.872665, 0, 0)
        
        -- setLabel(8, "直线运动")
        -- setLabel(9, "getAgv")
        setTcpOffset({0,0,0,0,0,0})
        moveLine(getAgv_p, 0.5, 0.1, 0, 0)
        
        -- setLabel(10, "等待：1.00s")
        sleep(1)
        
        -- setLabel(11, "设置 control=1035")
        modbusSetOutputSignal('control', 1035)
        
        -- setLabel(12, "等待：2.00s")
        sleep(2)
        
        -- setLabel(13, "直线运动")
        -- setLabel(14, "getAgvUp")
        setTcpOffset({0,0,0,0,0,0})
        moveLine(getAgvUp_p, 0.5, 0.1, 0, 0)
        
        -- setLabel(15, "关节运动")
        -- setLabel(16, "guoduP")
        setTcpOffset({0,0,0,0,0,0})
        moveJoint(inverseKinematics(guoduP_q, guoduP_p), 1.0472, 0.872665, 0, 0)
        
        -- setLabel(17, "pzdP")
        setTcpOffset({0,0,0,0,0,0})
        moveJoint(inverseKinematics(pzdP_q, pzdP_p), 1.0472, 0.872665, 0, 0)
        
        -- setLabel(18, "关节运动")
        -- setLabel(19, "pzdP")
        setTcpOffset({0,0,0,0,0,0})
        moveJoint(inverseKinematics(pzdP_q, pzdP_p), 1.0472, 0.872665, 0, 0)
        
        -- setLabel(20, "等待：1.00s")
        sleep(1)
        
        -- setLabel(21, "fput1.lua")
        --subscript context start
        ip = "192.168.192.111" --服务端IP地址
        port = 55000 --串口号
        client_name = "socketPcsscm1" --客户端名称
        socketOpen(ip, port, client_name) ----与服务端建立通信
        sleep(2)
        --------------------------------------通信部分----------------------------------------------
        -- 发送拍照数据
        msg_send_put01="201,1,-94.48,7.33,-59.56,11.43,-91.11,-29.68,-78.88,525.08,602.92,170.34,6.7,-155.5"
        socketSendLine(msg_send_put01, client_name) --发送给服务端字符串
        sleep(2)
        msg_send_put02="203,10,2"
        socketSendLine(msg_send_put02, client_name) --发送给服务端字符串
        sleep(2)
        msg_send_put03="205,1"
        socketSendLine(msg_send_put03, client_name) --发送给服务端字符串
        sleep(1)
        --接受数据
        rec_str = ""
        rec_key = "camera_send2" --接收服务端发送的字符串
        --接收服务端发送的字符串后停止循环
        while(rec_str == nil or rec_str == "") 
        do
          socketReadString(rec_key, client_name, "", "", true) 
          rec_str = getString(rec_key, "")
        end
        ------------------------------数据处理--------------------------------
        --------------------------------------------------------
        GddADeg={-93.59,23.09,-114.39,-139.07,-87.17,-24.26}
        GddARad=degToRadList(GddADeg)
        sleep(0.001)
        pzdDeg={-94.48,7.33,-59.56,11.43,-91.11,-29.86}
        pzdRad=degToRadList(pzdDeg)
        textmsg("start running ...")
        sleep(0.001)
        --机械臂移动参数设置区
        pointPutAll=string.split(rec_str,",")
        point_get=rec_str
        -- textmsg("up point")
        -- textmsg(pointPutAll[7])
        -- textmsg(pointPutAll[12])
        -- textmsg("get point")
        -- textmsg(pointPutAll[15])
        -- textmsg(pointPutAll[20])
        -- textmsg(point_get)
        ----------------------------------------------------
        PutUpJointDeg0={pointPutAll[8],pointPutAll[9],pointPutAll[10],pointPutAll[11],pointPutAll[12],pointPutAll[13]}
        PutJointDeg0={pointPutAll[16],pointPutAll[17],pointPutAll[18],pointPutAll[19],pointPutAll[20],pointPutAll[21]}
        -- PutUpJointRad={toRad(pointPutAll[7]),toRad(pointPutAll[8]),toRad(pointPutAll[9]),toRad(pointPutAll[10]),toRad(pointPutAll[11]),toRad(pointPutAll[12])}
        -- PutJointRad={toRad(pointPutAll[15]),toRad(pointPutAll[16]),toRad(pointPutAll[17]),toRad(pointPutAll[18]),toRad(pointPutAll[19]),toRad(pointPutAll[20])}
        sleep(0.001)
        PutUpJointRad=degToRadList(PutUpJointDeg0)
        PutJointRad=degToRadList(PutJointDeg0)
        textmsg("PutUpJointRad result")
        textmsg(table.concat(PutUpJointRad,","))
        textmsg("PutUpJointDeg result")
        textmsg(table.concat(PutUpJointDeg0,","))
        sleep(0.001)
        textmsg("PutJointRad result")
        textmsg(table.concat(PutJointRad,","))
        textmsg("PutJointDeg result")
        textmsg(table.concat(PutJointDeg0,","))
        sleep(0.01)
        ---------------------------主控部分--------------------------------
        --机械臂移动控制区
        moveJoint(GddARad, 1.0, 1.0, 0, 0)
        --视觉伺服点
        moveJoint(PutUpJointRad, 1.0, 1.0, 0, 0)
        moveJoint(PutJointRad,1.0, 1.0, 0, 0)
        sleep(2)
        --放置
        modbusSetOutputSignal('control', 811)
        sleep(1)
        --视觉伺服点
        moveJoint(PutUpJointRad,1.0, 1.0, 0,0)
        moveJoint(GddARad, 1.0, 1.0, 0, 0)
        moveJoint(pzdRad, 1.0, 1.0, 0, 0)
        ----------------------------------------------------
        socketClose(client_name)
        textmsg("running finish")
        --subscript context end
        
        -- setLabel(22, "关节运动")
        -- setLabel(23, "home")
        setTcpOffset({0,0,0,0,0,0})
        moveJoint(inverseKinematics(home_q, home_p), 1.0472, 0.872665, 0, 0)
        
        -- sched.sync_program_point()
        if (PutJointRad == 012.3211) then
            -- setLabel(24, "如果 PutJointRad == 012.3211")
            -- setLabel(25, "关节运动")
            -- setLabel(26, "home")
            setTcpOffset({0,0,0,0,0,0})
            moveJoint(inverseKinematics(home_q, home_p), 1.0472, 0.872665, 0, 0)
            
            -- setLabel(27, "fangddd")
            setTcpOffset({0,0,0,0,0,0})
            moveJoint(inverseKinematics(fangddd_q, fangddd_p), 1.0472, 0.872665, 0, 0)
            
            -- setLabel(28, "fupggg")
            setTcpOffset({0,0,0,0,0,0})
            moveJoint(inverseKinematics(fupggg_q, fupggg_p), 1.0472, 0.872665, 0, 0)
        end
    --subscript context end
end

function app:start(api)
  --
  self.api = api
  print("start---")
  p_agvGooo()
end

function app:robot_error_handler(name, err)
  --
  print("An error hanppen to robot "..name)
end

-- return our app object
return app


